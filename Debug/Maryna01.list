
Maryna01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e1c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007fa4  08007fa4  00017fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fc0  08007fc0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007fc0  08007fc0  00017fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fc8  08007fc8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fc8  08007fc8  00017fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fcc  08007fcc  00017fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000860  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008f0  200008f0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b735  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004006  00000000  00000000  0003b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  0003f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fe0  00000000  00000000  00040980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002430a  00000000  00000000  00041960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018eeb  00000000  00000000  00065c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb7dc  00000000  00000000  0007eb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0014a331  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004924  00000000  00000000  0014a384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007f8c 	.word	0x08007f8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08007f8c 	.word	0x08007f8c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * the Code Generation settings)
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08c      	sub	sp, #48	; 0x30
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 031c 	add.w	r3, r7, #28
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	61bb      	str	r3, [r7, #24]
 80004da:	4b92      	ldr	r3, [pc, #584]	; (8000724 <MX_GPIO_Init+0x264>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a91      	ldr	r2, [pc, #580]	; (8000724 <MX_GPIO_Init+0x264>)
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b8f      	ldr	r3, [pc, #572]	; (8000724 <MX_GPIO_Init+0x264>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0310 	and.w	r3, r3, #16
 80004ee:	61bb      	str	r3, [r7, #24]
 80004f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	617b      	str	r3, [r7, #20]
 80004f6:	4b8b      	ldr	r3, [pc, #556]	; (8000724 <MX_GPIO_Init+0x264>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a8a      	ldr	r2, [pc, #552]	; (8000724 <MX_GPIO_Init+0x264>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b88      	ldr	r3, [pc, #544]	; (8000724 <MX_GPIO_Init+0x264>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	613b      	str	r3, [r7, #16]
 8000512:	4b84      	ldr	r3, [pc, #528]	; (8000724 <MX_GPIO_Init+0x264>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a83      	ldr	r2, [pc, #524]	; (8000724 <MX_GPIO_Init+0x264>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b81      	ldr	r3, [pc, #516]	; (8000724 <MX_GPIO_Init+0x264>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	4b7d      	ldr	r3, [pc, #500]	; (8000724 <MX_GPIO_Init+0x264>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a7c      	ldr	r2, [pc, #496]	; (8000724 <MX_GPIO_Init+0x264>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b7a      	ldr	r3, [pc, #488]	; (8000724 <MX_GPIO_Init+0x264>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000546:	2300      	movs	r3, #0
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	4b76      	ldr	r3, [pc, #472]	; (8000724 <MX_GPIO_Init+0x264>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a75      	ldr	r2, [pc, #468]	; (8000724 <MX_GPIO_Init+0x264>)
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
 8000556:	4b73      	ldr	r3, [pc, #460]	; (8000724 <MX_GPIO_Init+0x264>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	4b6f      	ldr	r3, [pc, #444]	; (8000724 <MX_GPIO_Init+0x264>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a6e      	ldr	r2, [pc, #440]	; (8000724 <MX_GPIO_Init+0x264>)
 800056c:	f043 0308 	orr.w	r3, r3, #8
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b6c      	ldr	r3, [pc, #432]	; (8000724 <MX_GPIO_Init+0x264>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0308 	and.w	r3, r3, #8
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	4869      	ldr	r0, [pc, #420]	; (8000728 <MX_GPIO_Init+0x268>)
 8000584:	f001 f8ae 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2101      	movs	r1, #1
 800058c:	4867      	ldr	r0, [pc, #412]	; (800072c <MX_GPIO_Init+0x26c>)
 800058e:	f001 f8a9 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f24e 0110 	movw	r1, #57360	; 0xe010
 8000598:	4865      	ldr	r0, [pc, #404]	; (8000730 <MX_GPIO_Init+0x270>)
 800059a:	f001 f8a3 	bl	80016e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6
                           PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800059e:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80005a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a4:	2303      	movs	r3, #3
 80005a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ac:	f107 031c 	add.w	r3, r7, #28
 80005b0:	4619      	mov	r1, r3
 80005b2:	485d      	ldr	r0, [pc, #372]	; (8000728 <MX_GPIO_Init+0x268>)
 80005b4:	f000 fee2 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005b8:	2308      	movs	r3, #8
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4619      	mov	r1, r3
 80005ce:	4856      	ldr	r0, [pc, #344]	; (8000728 <MX_GPIO_Init+0x268>)
 80005d0:	f000 fed4 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC1 PC2 PC4
                           PC5 PC6 PC8 PC9
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80005d4:	f642 3376 	movw	r3, #11126	; 0x2b76
 80005d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005da:	2303      	movs	r3, #3
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	4850      	ldr	r0, [pc, #320]	; (800072c <MX_GPIO_Init+0x26c>)
 80005ea:	f000 fec7 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fa:	2300      	movs	r3, #0
 80005fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4619      	mov	r1, r3
 8000604:	4849      	ldr	r0, [pc, #292]	; (800072c <MX_GPIO_Init+0x26c>)
 8000606:	f000 feb9 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800060a:	2308      	movs	r3, #8
 800060c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060e:	2302      	movs	r3, #2
 8000610:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000612:	2300      	movs	r3, #0
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000616:	2300      	movs	r3, #0
 8000618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800061a:	2305      	movs	r3, #5
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	4619      	mov	r1, r3
 8000624:	4841      	ldr	r0, [pc, #260]	; (800072c <MX_GPIO_Init+0x26c>)
 8000626:	f000 fea9 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800062a:	2301      	movs	r3, #1
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	483d      	ldr	r0, [pc, #244]	; (8000734 <MX_GPIO_Init+0x274>)
 800063e:	f000 fe9d 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA8
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8
 8000642:	f248 130e 	movw	r3, #33038	; 0x810e
 8000646:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000648:	2303      	movs	r3, #3
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	4837      	ldr	r0, [pc, #220]	; (8000734 <MX_GPIO_Init+0x274>)
 8000658:	f000 fe90 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB11 PB12
                           PB13 PB14 PB15 PB4
                           PB5 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12
 800065c:	f64f 13b3 	movw	r3, #63923	; 0xf9b3
 8000660:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066a:	f107 031c 	add.w	r3, r7, #28
 800066e:	4619      	mov	r1, r3
 8000670:	4831      	ldr	r0, [pc, #196]	; (8000738 <MX_GPIO_Init+0x278>)
 8000672:	f000 fe83 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000676:	2304      	movs	r3, #4
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	482b      	ldr	r0, [pc, #172]	; (8000738 <MX_GPIO_Init+0x278>)
 800068a:	f000 fe77 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800068e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000694:	2302      	movs	r3, #2
 8000696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006a0:	2305      	movs	r3, #5
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4619      	mov	r1, r3
 80006aa:	4823      	ldr	r0, [pc, #140]	; (8000738 <MX_GPIO_Init+0x278>)
 80006ac:	f000 fe66 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD0 PD1 PD2
                           PD3 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80006b0:	f641 73cf 	movw	r3, #8143	; 0x1fcf
 80006b4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006b6:	2303      	movs	r3, #3
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	481a      	ldr	r0, [pc, #104]	; (8000730 <MX_GPIO_Init+0x270>)
 80006c6:	f000 fe59 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD5_Pin|LD6_Pin|Audio_RST_Pin;
 80006ca:	f24e 0310 	movw	r3, #57360	; 0xe010
 80006ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d0:	2301      	movs	r3, #1
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d8:	2300      	movs	r3, #0
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4813      	ldr	r0, [pc, #76]	; (8000730 <MX_GPIO_Init+0x270>)
 80006e4:	f000 fe4a 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006e8:	2320      	movs	r3, #32
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4619      	mov	r1, r3
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_GPIO_Init+0x270>)
 80006fc:	f000 fe3e 	bl	800137c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000704:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_GPIO_Init+0x268>)
 8000716:	f000 fe31 	bl	800137c <HAL_GPIO_Init>

}
 800071a:	bf00      	nop
 800071c:	3730      	adds	r7, #48	; 0x30
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40021000 	.word	0x40021000
 800072c:	40020800 	.word	0x40020800
 8000730:	40020c00 	.word	0x40020c00
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400

0800073c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_I2C1_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_I2C1_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_I2C1_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C1_Init+0x50>)
 800077a:	f002 fd3d 	bl	80031f8 <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fb00 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000bc 	.word	0x200000bc
 8000790:	40005400 	.word	0x40005400
 8000794:	000186a0 	.word	0x000186a0

08000798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a19      	ldr	r2, [pc, #100]	; (800081c <HAL_I2C_MspInit+0x84>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d12c      	bne.n	8000814 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007dc:	2312      	movs	r3, #18
 80007de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e8:	2304      	movs	r3, #4
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <HAL_I2C_MspInit+0x8c>)
 80007f4:	f000 fdc2 	bl	800137c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_I2C_MspInit+0x88>)
 8000802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_I2C_MspInit+0x88>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40005400 	.word	0x40005400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020400 	.word	0x40020400

08000828 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_I2S3_Init+0x54>)
 800082e:	4a14      	ldr	r2, [pc, #80]	; (8000880 <MX_I2S3_Init+0x58>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_I2S3_Init+0x54>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_I2S3_Init+0x54>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_I2S3_Init+0x54>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_I2S3_Init+0x54>)
 8000848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800084c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_I2S3_Init+0x54>)
 8000850:	4a0c      	ldr	r2, [pc, #48]	; (8000884 <MX_I2S3_Init+0x5c>)
 8000852:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_I2S3_Init+0x54>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_I2S3_Init+0x54>)
 800085c:	2200      	movs	r2, #0
 800085e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_I2S3_Init+0x54>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_I2S3_Init+0x54>)
 8000868:	f002 fe0a 	bl	8003480 <HAL_I2S_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000872:	f000 fa89 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000110 	.word	0x20000110
 8000880:	40003c00 	.word	0x40003c00
 8000884:	00017700 	.word	0x00017700

08000888 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	; 0x38
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a31      	ldr	r2, [pc, #196]	; (8000978 <HAL_I2S_MspInit+0xf0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d15a      	bne.n	800096e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80008b8:	2301      	movs	r3, #1
 80008ba:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80008bc:	23c0      	movs	r3, #192	; 0xc0
 80008be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fed9 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80008d4:	f000 fa58 	bl	8000d88 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80008d8:	2300      	movs	r3, #0
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	4b27      	ldr	r3, [pc, #156]	; (800097c <HAL_I2S_MspInit+0xf4>)
 80008de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e0:	4a26      	ldr	r2, [pc, #152]	; (800097c <HAL_I2S_MspInit+0xf4>)
 80008e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e6:	6413      	str	r3, [r2, #64]	; 0x40
 80008e8:	4b24      	ldr	r3, [pc, #144]	; (800097c <HAL_I2S_MspInit+0xf4>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <HAL_I2S_MspInit+0xf4>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4a1f      	ldr	r2, [pc, #124]	; (800097c <HAL_I2S_MspInit+0xf4>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6313      	str	r3, [r2, #48]	; 0x30
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <HAL_I2S_MspInit+0xf4>)
 8000906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_I2S_MspInit+0xf4>)
 8000916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000918:	4a18      	ldr	r2, [pc, #96]	; (800097c <HAL_I2S_MspInit+0xf4>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6313      	str	r3, [r2, #48]	; 0x30
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_I2S_MspInit+0xf4>)
 8000922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800092c:	2310      	movs	r3, #16
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800093c:	2306      	movs	r3, #6
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	480e      	ldr	r0, [pc, #56]	; (8000980 <HAL_I2S_MspInit+0xf8>)
 8000948:	f000 fd18 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800094c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800095e:	2306      	movs	r3, #6
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4806      	ldr	r0, [pc, #24]	; (8000984 <HAL_I2S_MspInit+0xfc>)
 800096a:	f000 fd07 	bl	800137c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800096e:	bf00      	nop
 8000970:	3738      	adds	r7, #56	; 0x38
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40003c00 	.word	0x40003c00
 800097c:	40023800 	.word	0x40023800
 8000980:	40020000 	.word	0x40020000
 8000984:	40020800 	.word	0x40020800

08000988 <HardwareUpdate>:
		HAL_Delay(time_ms);
	}
}

void HardwareUpdate()
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0


	  Tick=HAL_GetTick();
 800098c:	f000 fbb4 	bl	80010f8 <HAL_GetTick>
 8000990:	4603      	mov	r3, r0
 8000992:	4a16      	ldr	r2, [pc, #88]	; (80009ec <HardwareUpdate+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

      BlueButton.Status=HAL_GPIO_ReadPin(BlueButton.Port, BlueButton.Pin);
 8000996:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <HardwareUpdate+0x68>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HardwareUpdate+0x68>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	4619      	mov	r1, r3
 80009a4:	4610      	mov	r0, r2
 80009a6:	f000 fe85 	bl	80016b4 <HAL_GPIO_ReadPin>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	bf14      	ite	ne
 80009b0:	2301      	movne	r3, #1
 80009b2:	2300      	moveq	r3, #0
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HardwareUpdate+0x68>)
 80009b8:	721a      	strb	r2, [r3, #8]
	  HAL_GPIO_WritePin(RedLED.Port, RedLED.Pin, RedLED.Status);
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HardwareUpdate+0x6c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HardwareUpdate+0x6c>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <HardwareUpdate+0x6c>)
 80009c8:	7a12      	ldrb	r2, [r2, #8]
 80009ca:	4619      	mov	r1, r3
 80009cc:	f000 fe8a 	bl	80016e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BlueLED.Port, BlueLED.Pin, BlueButton.Status);
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HardwareUpdate+0x70>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HardwareUpdate+0x70>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HardwareUpdate+0x68>)
 80009de:	7a12      	ldrb	r2, [r2, #8]
 80009e0:	4619      	mov	r1, r3
 80009e2:	f000 fe7f 	bl	80016e4 <HAL_GPIO_WritePin>

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001a0 	.word	0x200001a0
 80009f0:	20000188 	.word	0x20000188
 80009f4:	20000170 	.word	0x20000170
 80009f8:	20000158 	.word	0x20000158

080009fc <SetStartValues.8350>:
  HAL_Init();

  /* USER CODE BEGIN Init */

  void SetStartValues()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	f8c7 c004 	str.w	ip, [r7, #4]
	   Tick=HAL_GetTick();
 8000a06:	f000 fb77 	bl	80010f8 <HAL_GetTick>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <SetStartValues.8350+0xd0>)
 8000a0e:	6013      	str	r3, [r2, #0]

	   BlueButton.Port=(uint32_t) GPIOA;
 8000a10:	4b2f      	ldr	r3, [pc, #188]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a12:	4a30      	ldr	r2, [pc, #192]	; (8000ad4 <SetStartValues.8350+0xd8>)
 8000a14:	601a      	str	r2, [r3, #0]
	   BlueButton.Pin=GPIO_PIN_0;
 8000a16:	4b2e      	ldr	r3, [pc, #184]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	605a      	str	r2, [r3, #4]
	   BlueButton.Status=0;
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	721a      	strb	r2, [r3, #8]
	   BlueButton.PrevStatus=0;
 8000a22:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	725a      	strb	r2, [r3, #9]
	   BlueButton.Temp=0;
 8000a28:	4b29      	ldr	r3, [pc, #164]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	729a      	strb	r2, [r3, #10]
	   BlueButton.WhenOn=Tick;
 8000a2e:	4b27      	ldr	r3, [pc, #156]	; (8000acc <SetStartValues.8350+0xd0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a34:	60d3      	str	r3, [r2, #12]
	   BlueButton.WhenOff=Tick;
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <SetStartValues.8350+0xd0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a25      	ldr	r2, [pc, #148]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a3c:	6113      	str	r3, [r2, #16]
	   BlueButton.Count=0;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	751a      	strb	r2, [r3, #20]
	   BlueButton.UnLock=1;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <SetStartValues.8350+0xd4>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	755a      	strb	r2, [r3, #21]

	   RedLED.Port=(uint32_t) GPIOD;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a4c:	4a23      	ldr	r2, [pc, #140]	; (8000adc <SetStartValues.8350+0xe0>)
 8000a4e:	601a      	str	r2, [r3, #0]
	   RedLED.Pin=GPIO_PIN_13;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a56:	605a      	str	r2, [r3, #4]
	   RedLED.Status=0;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	721a      	strb	r2, [r3, #8]
	   RedLED.PrevStatus=0;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	725a      	strb	r2, [r3, #9]
	   RedLED.Temp=0;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	729a      	strb	r2, [r3, #10]
	   RedLED.WhenOn=Tick;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <SetStartValues.8350+0xd0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a70:	60d3      	str	r3, [r2, #12]
	   RedLED.WhenOff=Tick;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <SetStartValues.8350+0xd0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a78:	6113      	str	r3, [r2, #16]
	   RedLED.Count=0;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	751a      	strb	r2, [r3, #20]
	   RedLED.UnLock=0;
 8000a80:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <SetStartValues.8350+0xdc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	755a      	strb	r2, [r3, #21]

	   BlueLED.Port=(uint32_t) GPIOD;
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000a88:	4a14      	ldr	r2, [pc, #80]	; (8000adc <SetStartValues.8350+0xe0>)
 8000a8a:	601a      	str	r2, [r3, #0]
	   BlueLED.Pin=GPIO_PIN_15;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000a8e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a92:	605a      	str	r2, [r3, #4]
	   BlueLED.Status=0;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	721a      	strb	r2, [r3, #8]
	   BlueLED.PrevStatus=0;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	725a      	strb	r2, [r3, #9]
	   BlueLED.Temp=0;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	729a      	strb	r2, [r3, #10]
	   BlueLED.WhenOn=Tick;
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <SetStartValues.8350+0xd0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000aac:	60d3      	str	r3, [r2, #12]
	   BlueLED.WhenOff=Tick;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <SetStartValues.8350+0xd0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a0b      	ldr	r2, [pc, #44]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000ab4:	6113      	str	r3, [r2, #16]
	   BlueLED.Count=0;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	751a      	strb	r2, [r3, #20]
	   BlueLED.UnLock=1;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <SetStartValues.8350+0xe4>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	755a      	strb	r2, [r3, #21]

}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200001a0 	.word	0x200001a0
 8000ad0:	20000188 	.word	0x20000188
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	20000170 	.word	0x20000170
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	20000158 	.word	0x20000158

08000ae4 <main>:
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
int main(void)
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	607b      	str	r3, [r7, #4]
  HAL_Init();
 8000af0:	f000 fa9c 	bl	800102c <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af4:	f000 f8de 	bl	8000cb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af8:	f7ff fce2 	bl	80004c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000afc:	f7ff fe1e 	bl	800073c <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b00:	f7ff fe92 	bl	8000828 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b04:	f000 f946 	bl	8000d94 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000b08:	f006 fe2e 	bl	8007768 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000b0c:	f006 fe52 	bl	80077b4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

	  SetStartValues();
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	469c      	mov	ip, r3
 8000b14:	f7ff ff72 	bl	80009fc <SetStartValues.8350>

   while(1)
   {
	  if (BlueButton.UnLock) BlueButton.PrevStatus=BlueButton.Status;
 8000b18:	4b63      	ldr	r3, [pc, #396]	; (8000ca8 <main+0x1c4>)
 8000b1a:	7d5b      	ldrb	r3, [r3, #21]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d003      	beq.n	8000b28 <main+0x44>
 8000b20:	4b61      	ldr	r3, [pc, #388]	; (8000ca8 <main+0x1c4>)
 8000b22:	7a1a      	ldrb	r2, [r3, #8]
 8000b24:	4b60      	ldr	r3, [pc, #384]	; (8000ca8 <main+0x1c4>)
 8000b26:	725a      	strb	r2, [r3, #9]

	  HardwareUpdate();
 8000b28:	f7ff ff2e 	bl	8000988 <HardwareUpdate>

//******************* Counting *******************
	  if ((!BlueButton.PrevStatus) && (BlueButton.Status)) BlueButton.WhenOn=Tick;
 8000b2c:	4b5e      	ldr	r3, [pc, #376]	; (8000ca8 <main+0x1c4>)
 8000b2e:	7a5b      	ldrb	r3, [r3, #9]
 8000b30:	f083 0301 	eor.w	r3, r3, #1
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d007      	beq.n	8000b4a <main+0x66>
 8000b3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ca8 <main+0x1c4>)
 8000b3c:	7a1b      	ldrb	r3, [r3, #8]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d003      	beq.n	8000b4a <main+0x66>
 8000b42:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <main+0x1c8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a58      	ldr	r2, [pc, #352]	; (8000ca8 <main+0x1c4>)
 8000b48:	60d3      	str	r3, [r2, #12]
	  if ((BlueButton.PrevStatus) && (!BlueButton.Status)) BlueButton.WhenOff=Tick;
 8000b4a:	4b57      	ldr	r3, [pc, #348]	; (8000ca8 <main+0x1c4>)
 8000b4c:	7a5b      	ldrb	r3, [r3, #9]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d00a      	beq.n	8000b68 <main+0x84>
 8000b52:	4b55      	ldr	r3, [pc, #340]	; (8000ca8 <main+0x1c4>)
 8000b54:	7a1b      	ldrb	r3, [r3, #8]
 8000b56:	f083 0301 	eor.w	r3, r3, #1
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d003      	beq.n	8000b68 <main+0x84>
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <main+0x1c8>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a50      	ldr	r2, [pc, #320]	; (8000ca8 <main+0x1c4>)
 8000b66:	6113      	str	r3, [r2, #16]

	  if ((!BlueButton.Temp) && (BlueButton.PrevStatus!=BlueButton.Status))
 8000b68:	4b4f      	ldr	r3, [pc, #316]	; (8000ca8 <main+0x1c4>)
 8000b6a:	7a9b      	ldrb	r3, [r3, #10]
 8000b6c:	f083 0301 	eor.w	r3, r3, #1
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d008      	beq.n	8000b88 <main+0xa4>
 8000b76:	4b4c      	ldr	r3, [pc, #304]	; (8000ca8 <main+0x1c4>)
 8000b78:	7a5a      	ldrb	r2, [r3, #9]
 8000b7a:	4b4b      	ldr	r3, [pc, #300]	; (8000ca8 <main+0x1c4>)
 8000b7c:	7a1b      	ldrb	r3, [r3, #8]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d002      	beq.n	8000b88 <main+0xa4>
		  BlueButton.Temp=1; // latch first slope
 8000b82:	4b49      	ldr	r3, [pc, #292]	; (8000ca8 <main+0x1c4>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	729a      	strb	r2, [r3, #10]

	  if ((BlueButton.Temp) &&
 8000b88:	4b47      	ldr	r3, [pc, #284]	; (8000ca8 <main+0x1c4>)
 8000b8a:	7a9b      	ldrb	r3, [r3, #10]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d01d      	beq.n	8000bcc <main+0xe8>
			  ((Tick- BlueButton.WhenOn)>DEBOUNCE_TIME) &&
 8000b90:	4b46      	ldr	r3, [pc, #280]	; (8000cac <main+0x1c8>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <main+0x1c4>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	1ad3      	subs	r3, r2, r3
	  if ((BlueButton.Temp) &&
 8000b9a:	2b1e      	cmp	r3, #30
 8000b9c:	d916      	bls.n	8000bcc <main+0xe8>
			  ((Tick- BlueButton.WhenOff)>DEBOUNCE_TIME) &&
 8000b9e:	4b43      	ldr	r3, [pc, #268]	; (8000cac <main+0x1c8>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	4b41      	ldr	r3, [pc, #260]	; (8000ca8 <main+0x1c4>)
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	1ad3      	subs	r3, r2, r3
			  ((Tick- BlueButton.WhenOn)>DEBOUNCE_TIME) &&
 8000ba8:	2b1e      	cmp	r3, #30
 8000baa:	d90f      	bls.n	8000bcc <main+0xe8>
			  (!BlueButton.Status))
 8000bac:	4b3e      	ldr	r3, [pc, #248]	; (8000ca8 <main+0x1c4>)
 8000bae:	7a1b      	ldrb	r3, [r3, #8]
 8000bb0:	f083 0301 	eor.w	r3, r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
			  ((Tick- BlueButton.WhenOff)>DEBOUNCE_TIME) &&
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d008      	beq.n	8000bcc <main+0xe8>
	  {
		  BlueButton.Count++;
 8000bba:	4b3b      	ldr	r3, [pc, #236]	; (8000ca8 <main+0x1c4>)
 8000bbc:	7d1b      	ldrb	r3, [r3, #20]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	b2da      	uxtb	r2, r3
 8000bc2:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <main+0x1c4>)
 8000bc4:	751a      	strb	r2, [r3, #20]
	  	  BlueButton.Temp=0;
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <main+0x1c4>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	729a      	strb	r2, [r3, #10]
	  }

//******************* Blinking *******************
	  if (((Tick-BlueButton.WhenOff)>AFTER_PUSH_TIME) && (BlueButton.Count) && (!BlueButton.Status) && (!BlueButton.PrevStatus))
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <main+0x1c8>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <main+0x1c4>)
 8000bd2:	691b      	ldr	r3, [r3, #16]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bda:	d920      	bls.n	8000c1e <main+0x13a>
 8000bdc:	4b32      	ldr	r3, [pc, #200]	; (8000ca8 <main+0x1c4>)
 8000bde:	7d1b      	ldrb	r3, [r3, #20]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d01c      	beq.n	8000c1e <main+0x13a>
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <main+0x1c4>)
 8000be6:	7a1b      	ldrb	r3, [r3, #8]
 8000be8:	f083 0301 	eor.w	r3, r3, #1
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d015      	beq.n	8000c1e <main+0x13a>
 8000bf2:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <main+0x1c4>)
 8000bf4:	7a5b      	ldrb	r3, [r3, #9]
 8000bf6:	f083 0301 	eor.w	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00e      	beq.n	8000c1e <main+0x13a>
	  {
		  BlueButton.UnLock=0;
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <main+0x1c4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	755a      	strb	r2, [r3, #21]
		  RedLED.UnLock=1;
 8000c06:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <main+0x1cc>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	755a      	strb	r2, [r3, #21]
		  RedLED.Count=2*BlueButton.Count;
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <main+0x1c4>)
 8000c0e:	7d1b      	ldrb	r3, [r3, #20]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b26      	ldr	r3, [pc, #152]	; (8000cb0 <main+0x1cc>)
 8000c16:	751a      	strb	r2, [r3, #20]
		  BlueButton.Count=0;
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <main+0x1c4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	751a      	strb	r2, [r3, #20]
	  }

	  if (RedLED.UnLock)
 8000c1e:	4b24      	ldr	r3, [pc, #144]	; (8000cb0 <main+0x1cc>)
 8000c20:	7d5b      	ldrb	r3, [r3, #21]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f43f af78 	beq.w	8000b18 <main+0x34>
	  {
		  if ((RedLED.Status==1) && ((Tick-RedLED.WhenOn)>BLINK_TIME))
 8000c28:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <main+0x1cc>)
 8000c2a:	7a1b      	ldrb	r3, [r3, #8]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d013      	beq.n	8000c58 <main+0x174>
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <main+0x1c8>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <main+0x1cc>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2bc8      	cmp	r3, #200	; 0xc8
 8000c3c:	d90c      	bls.n	8000c58 <main+0x174>
		  {
			  RedLED.Status=0;
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	; (8000cb0 <main+0x1cc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	721a      	strb	r2, [r3, #8]
			  RedLED.WhenOff=Tick;
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <main+0x1c8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a19      	ldr	r2, [pc, #100]	; (8000cb0 <main+0x1cc>)
 8000c4a:	6113      	str	r3, [r2, #16]
			  RedLED.Count--;
 8000c4c:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <main+0x1cc>)
 8000c4e:	7d1b      	ldrb	r3, [r3, #20]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	b2da      	uxtb	r2, r3
 8000c54:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <main+0x1cc>)
 8000c56:	751a      	strb	r2, [r3, #20]
		  }
		  if ((RedLED.Status==0) && ((Tick-RedLED.WhenOff)>BLINK_TIME))
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <main+0x1cc>)
 8000c5a:	7a1b      	ldrb	r3, [r3, #8]
 8000c5c:	f083 0301 	eor.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d013      	beq.n	8000c8e <main+0x1aa>
 8000c66:	4b11      	ldr	r3, [pc, #68]	; (8000cac <main+0x1c8>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <main+0x1cc>)
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	2bc8      	cmp	r3, #200	; 0xc8
 8000c72:	d90c      	bls.n	8000c8e <main+0x1aa>
		  {
			  RedLED.Status=1;
 8000c74:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <main+0x1cc>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	721a      	strb	r2, [r3, #8]
			  RedLED.WhenOn=Tick;
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <main+0x1c8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a0c      	ldr	r2, [pc, #48]	; (8000cb0 <main+0x1cc>)
 8000c80:	60d3      	str	r3, [r2, #12]
			  RedLED.Count--;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <main+0x1cc>)
 8000c84:	7d1b      	ldrb	r3, [r3, #20]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <main+0x1cc>)
 8000c8c:	751a      	strb	r2, [r3, #20]
		  }
		  if (RedLED.Count==0)
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <main+0x1cc>)
 8000c90:	7d1b      	ldrb	r3, [r3, #20]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f47f af40 	bne.w	8000b18 <main+0x34>
			  {
			  	  RedLED.UnLock=0;
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <main+0x1cc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	755a      	strb	r2, [r3, #21]
			  	  BlueButton.UnLock=1;
 8000c9e:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <main+0x1c4>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	755a      	strb	r2, [r3, #21]
	  if (BlueButton.UnLock) BlueButton.PrevStatus=BlueButton.Status;
 8000ca4:	e738      	b.n	8000b18 <main+0x34>
 8000ca6:	bf00      	nop
 8000ca8:	20000188 	.word	0x20000188
 8000cac:	200001a0 	.word	0x200001a0
 8000cb0:	20000170 	.word	0x20000170

08000cb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b094      	sub	sp, #80	; 0x50
 8000cb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cba:	f107 0320 	add.w	r3, r7, #32
 8000cbe:	2230      	movs	r2, #48	; 0x30
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f007 f892 	bl	8007dec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <SystemClock_Config+0xcc>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <SystemClock_Config+0xcc>)
 8000ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce8:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <SystemClock_Config+0xcc>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <SystemClock_Config+0xd0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <SystemClock_Config+0xd0>)
 8000cfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <SystemClock_Config+0xd0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d10:	2301      	movs	r3, #1
 8000d12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d24:	2308      	movs	r3, #8
 8000d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d32:	2307      	movs	r3, #7
 8000d34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 0320 	add.w	r3, r7, #32
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 f840 	bl	8003dc0 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d46:	f000 f81f 	bl	8000d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	2105      	movs	r1, #5
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 faa1 	bl	80042b0 <HAL_RCC_ClockConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d74:	f000 f808 	bl	8000d88 <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3750      	adds	r7, #80	; 0x50
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d98:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000d9a:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <MX_SPI1_Init+0x68>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dcc:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dd2:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000de0:	220a      	movs	r2, #10
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000de4:	4804      	ldr	r0, [pc, #16]	; (8000df8 <MX_SPI1_Init+0x64>)
 8000de6:	f003 fd8b 	bl	8004900 <HAL_SPI_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000df0:	f7ff ffca 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000df4:	bf00      	nop
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200001a8 	.word	0x200001a8
 8000dfc:	40013000 	.word	0x40013000

08000e00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <HAL_SPI_MspInit+0x84>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d12b      	bne.n	8000e7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a17      	ldr	r2, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_SPI_MspInit+0x88>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e5a:	23e0      	movs	r3, #224	; 0xe0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_SPI_MspInit+0x8c>)
 8000e76:	f000 fa81 	bl	800137c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x4c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ece:	2007      	movs	r0, #7
 8000ed0:	f000 fa12 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f8d0 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <OTG_FS_IRQHandler+0x10>)
 8000f3a:	f000 fe57 	bl	8001bec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200005dc 	.word	0x200005dc

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f006 fefe 	bl	8007d78 <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20020000 	.word	0x20020000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	200000ac 	.word	0x200000ac
 8000fb0:	200008f0 	.word	0x200008f0

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff4:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001002:	f7ff ffd7 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f006 febd 	bl	8007d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fd6b 	bl	8000ae4 <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800101c:	08007fd0 	.word	0x08007fd0
  ldr r2, =_sbss
 8001020:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001024:	200008f0 	.word	0x200008f0

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0d      	ldr	r2, [pc, #52]	; (800106c <HAL_Init+0x40>)
 8001036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <HAL_Init+0x40>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_Init+0x40>)
 8001042:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001046:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_Init+0x40>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <HAL_Init+0x40>)
 800104e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001052:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f94f 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105a:	2000      	movs	r0, #0
 800105c:	f000 f808 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001060:	f7ff ff16 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40023c00 	.word	0x40023c00

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f967 	bl	8001362 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f92f 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	; (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000200 	.word	0x20000200

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	; (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000200 	.word	0x20000200

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800118a:	4a04      	ldr	r2, [pc, #16]	; (800119c <__NVIC_SetPriorityGrouping+0x44>)
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	60d3      	str	r3, [r2, #12]
}
 8001190:	bf00      	nop
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	; (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff29 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff3e 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff8e 	bl	800124c <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5d 	bl	80011f8 <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff31 	bl	80011bc <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
 8001396:	e16b      	b.n	8001670 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001398:	2201      	movs	r2, #1
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4013      	ands	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	f040 815a 	bne.w	800166a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d005      	beq.n	80013ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d130      	bne.n	8001430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013d4:	69fb      	ldr	r3, [r7, #28]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	2203      	movs	r2, #3
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	4013      	ands	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	68da      	ldr	r2, [r3, #12]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001404:	2201      	movs	r2, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 0201 	and.w	r2, r3, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b03      	cmp	r3, #3
 800143a:	d017      	beq.n	800146c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d123      	bne.n	80014c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	08da      	lsrs	r2, r3, #3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3208      	adds	r2, #8
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	220f      	movs	r2, #15
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	691a      	ldr	r2, [r3, #16]
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0203 	and.w	r2, r3, #3
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f000 80b4 	beq.w	800166a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	4b60      	ldr	r3, [pc, #384]	; (8001688 <HAL_GPIO_Init+0x30c>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	4a5f      	ldr	r2, [pc, #380]	; (8001688 <HAL_GPIO_Init+0x30c>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6453      	str	r3, [r2, #68]	; 0x44
 8001512:	4b5d      	ldr	r3, [pc, #372]	; (8001688 <HAL_GPIO_Init+0x30c>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_GPIO_Init+0x310>)
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4013      	ands	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a52      	ldr	r2, [pc, #328]	; (8001690 <HAL_GPIO_Init+0x314>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d02b      	beq.n	80015a2 <HAL_GPIO_Init+0x226>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a51      	ldr	r2, [pc, #324]	; (8001694 <HAL_GPIO_Init+0x318>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d025      	beq.n	800159e <HAL_GPIO_Init+0x222>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a50      	ldr	r2, [pc, #320]	; (8001698 <HAL_GPIO_Init+0x31c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01f      	beq.n	800159a <HAL_GPIO_Init+0x21e>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <HAL_GPIO_Init+0x320>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x21a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4e      	ldr	r2, [pc, #312]	; (80016a0 <HAL_GPIO_Init+0x324>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x216>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4d      	ldr	r2, [pc, #308]	; (80016a4 <HAL_GPIO_Init+0x328>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x212>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4c      	ldr	r2, [pc, #304]	; (80016a8 <HAL_GPIO_Init+0x32c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x20e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <HAL_GPIO_Init+0x330>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x20a>
 8001582:	2307      	movs	r3, #7
 8001584:	e00e      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001586:	2308      	movs	r3, #8
 8001588:	e00c      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800158a:	2306      	movs	r3, #6
 800158c:	e00a      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800158e:	2305      	movs	r3, #5
 8001590:	e008      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001592:	2304      	movs	r3, #4
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 8001596:	2303      	movs	r3, #3
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x228>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <HAL_GPIO_Init+0x310>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e6:	4a32      	ldr	r2, [pc, #200]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015ec:	4b30      	ldr	r3, [pc, #192]	; (80016b0 <HAL_GPIO_Init+0x334>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001610:	4a27      	ldr	r2, [pc, #156]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163a:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_GPIO_Init+0x334>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_GPIO_Init+0x334>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f ae90 	bls.w	8001398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40021000 	.word	0x40021000
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40021800 	.word	0x40021800
 80016ac:	40021c00 	.word	0x40021c00
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691a      	ldr	r2, [r3, #16]
 80016c4:	887b      	ldrh	r3, [r7, #2]
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e001      	b.n	80016d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]
 80016f0:	4613      	mov	r3, r2
 80016f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f4:	787b      	ldrb	r3, [r7, #1]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016fa:	887a      	ldrh	r2, [r7, #2]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001700:	e003      	b.n	800170a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	041a      	lsls	r2, r3, #16
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	619a      	str	r2, [r3, #24]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001718:	b08f      	sub	sp, #60	; 0x3c
 800171a:	af0a      	add	r7, sp, #40	; 0x28
 800171c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e054      	b.n	80017d2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f006 f86e 	bl	8007824 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2203      	movs	r2, #3
 800174c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f003 f9c5 	bl	8004af6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	687e      	ldr	r6, [r7, #4]
 8001774:	466d      	mov	r5, sp
 8001776:	f106 0410 	add.w	r4, r6, #16
 800177a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001780:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001782:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001786:	e885 0003 	stmia.w	r5, {r0, r1}
 800178a:	1d33      	adds	r3, r6, #4
 800178c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800178e:	6838      	ldr	r0, [r7, #0]
 8001790:	f003 f93f 	bl	8004a12 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	4618      	mov	r0, r3
 800179c:	f003 f9bc 	bl	8004b18 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	687e      	ldr	r6, [r7, #4]
 80017a8:	466d      	mov	r5, sp
 80017aa:	f106 0410 	add.w	r4, r6, #16
 80017ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80017be:	1d33      	adds	r3, r6, #4
 80017c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f003 fb22 	bl	8004e0c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017da <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80017da:	b590      	push	{r4, r7, lr}
 80017dc:	b089      	sub	sp, #36	; 0x24
 80017de:	af04      	add	r7, sp, #16
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	4608      	mov	r0, r1
 80017e4:	4611      	mov	r1, r2
 80017e6:	461a      	mov	r2, r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	70fb      	strb	r3, [r7, #3]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70bb      	strb	r3, [r7, #2]
 80017f0:	4613      	mov	r3, r2
 80017f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_HCD_HC_Init+0x28>
 80017fe:	2302      	movs	r3, #2
 8001800:	e076      	b.n	80018f0 <HAL_HCD_HC_Init+0x116>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800180a:	78fb      	ldrb	r3, [r7, #3]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	212c      	movs	r1, #44	; 0x2c
 8001810:	fb01 f303 	mul.w	r3, r1, r3
 8001814:	4413      	add	r3, r2
 8001816:	333d      	adds	r3, #61	; 0x3d
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	212c      	movs	r1, #44	; 0x2c
 8001822:	fb01 f303 	mul.w	r3, r1, r3
 8001826:	4413      	add	r3, r2
 8001828:	3338      	adds	r3, #56	; 0x38
 800182a:	787a      	ldrb	r2, [r7, #1]
 800182c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	212c      	movs	r1, #44	; 0x2c
 8001834:	fb01 f303 	mul.w	r3, r1, r3
 8001838:	4413      	add	r3, r2
 800183a:	3340      	adds	r3, #64	; 0x40
 800183c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800183e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001840:	78fb      	ldrb	r3, [r7, #3]
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	212c      	movs	r1, #44	; 0x2c
 8001846:	fb01 f303 	mul.w	r3, r1, r3
 800184a:	4413      	add	r3, r2
 800184c:	3339      	adds	r3, #57	; 0x39
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001852:	78fb      	ldrb	r3, [r7, #3]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	212c      	movs	r1, #44	; 0x2c
 8001858:	fb01 f303 	mul.w	r3, r1, r3
 800185c:	4413      	add	r3, r2
 800185e:	333f      	adds	r3, #63	; 0x3f
 8001860:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001864:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	78ba      	ldrb	r2, [r7, #2]
 800186a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800186e:	b2d0      	uxtb	r0, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	212c      	movs	r1, #44	; 0x2c
 8001874:	fb01 f303 	mul.w	r3, r1, r3
 8001878:	4413      	add	r3, r2
 800187a:	333a      	adds	r3, #58	; 0x3a
 800187c:	4602      	mov	r2, r0
 800187e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001880:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da09      	bge.n	800189c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	212c      	movs	r1, #44	; 0x2c
 800188e:	fb01 f303 	mul.w	r3, r1, r3
 8001892:	4413      	add	r3, r2
 8001894:	333b      	adds	r3, #59	; 0x3b
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e008      	b.n	80018ae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	333b      	adds	r3, #59	; 0x3b
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	212c      	movs	r1, #44	; 0x2c
 80018b4:	fb01 f303 	mul.w	r3, r1, r3
 80018b8:	4413      	add	r3, r2
 80018ba:	333c      	adds	r3, #60	; 0x3c
 80018bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018c0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6818      	ldr	r0, [r3, #0]
 80018c6:	787c      	ldrb	r4, [r7, #1]
 80018c8:	78ba      	ldrb	r2, [r7, #2]
 80018ca:	78f9      	ldrb	r1, [r7, #3]
 80018cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	4623      	mov	r3, r4
 80018de:	f003 fc0f 	bl	8005100 <USB_HC_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd90      	pop	{r4, r7, pc}

080018f8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800190e:	2b01      	cmp	r3, #1
 8001910:	d101      	bne.n	8001916 <HAL_HCD_HC_Halt+0x1e>
 8001912:	2302      	movs	r3, #2
 8001914:	e00f      	b.n	8001936 <HAL_HCD_HC_Halt+0x3e>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f003 fe4b 	bl	80055c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001934:	7bfb      	ldrb	r3, [r7, #15]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4603      	mov	r3, r0
 8001950:	70fb      	strb	r3, [r7, #3]
 8001952:	460b      	mov	r3, r1
 8001954:	70bb      	strb	r3, [r7, #2]
 8001956:	4613      	mov	r3, r2
 8001958:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	212c      	movs	r1, #44	; 0x2c
 8001960:	fb01 f303 	mul.w	r3, r1, r3
 8001964:	4413      	add	r3, r2
 8001966:	333b      	adds	r3, #59	; 0x3b
 8001968:	78ba      	ldrb	r2, [r7, #2]
 800196a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	333f      	adds	r3, #63	; 0x3f
 800197a:	787a      	ldrb	r2, [r7, #1]
 800197c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800197e:	7c3b      	ldrb	r3, [r7, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d112      	bne.n	80019aa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	212c      	movs	r1, #44	; 0x2c
 800198a:	fb01 f303 	mul.w	r3, r1, r3
 800198e:	4413      	add	r3, r2
 8001990:	3342      	adds	r3, #66	; 0x42
 8001992:	2203      	movs	r2, #3
 8001994:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	333d      	adds	r3, #61	; 0x3d
 80019a4:	7f3a      	ldrb	r2, [r7, #28]
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	e008      	b.n	80019bc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	212c      	movs	r1, #44	; 0x2c
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	3342      	adds	r3, #66	; 0x42
 80019b8:	2202      	movs	r2, #2
 80019ba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80019bc:	787b      	ldrb	r3, [r7, #1]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	f200 80c6 	bhi.w	8001b50 <HAL_HCD_HC_SubmitRequest+0x210>
 80019c4:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <HAL_HCD_HC_SubmitRequest+0x8c>)
 80019c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ca:	bf00      	nop
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	08001b3d 	.word	0x08001b3d
 80019d4:	08001a41 	.word	0x08001a41
 80019d8:	08001abf 	.word	0x08001abf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80019dc:	7c3b      	ldrb	r3, [r7, #16]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	f040 80b8 	bne.w	8001b54 <HAL_HCD_HC_SubmitRequest+0x214>
 80019e4:	78bb      	ldrb	r3, [r7, #2]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 80b4 	bne.w	8001b54 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80019ec:	8b3b      	ldrh	r3, [r7, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d108      	bne.n	8001a04 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80019f2:	78fb      	ldrb	r3, [r7, #3]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	212c      	movs	r1, #44	; 0x2c
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	3355      	adds	r3, #85	; 0x55
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a04:	78fb      	ldrb	r3, [r7, #3]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	212c      	movs	r1, #44	; 0x2c
 8001a0a:	fb01 f303 	mul.w	r3, r1, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	3355      	adds	r3, #85	; 0x55
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a18:	78fb      	ldrb	r3, [r7, #3]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3342      	adds	r3, #66	; 0x42
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a2a:	e093      	b.n	8001b54 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	212c      	movs	r1, #44	; 0x2c
 8001a32:	fb01 f303 	mul.w	r3, r1, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	3342      	adds	r3, #66	; 0x42
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	701a      	strb	r2, [r3, #0]
      break;
 8001a3e:	e089      	b.n	8001b54 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001a40:	78bb      	ldrb	r3, [r7, #2]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d11d      	bne.n	8001a82 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	212c      	movs	r1, #44	; 0x2c
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	4413      	add	r3, r2
 8001a52:	3355      	adds	r3, #85	; 0x55
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	212c      	movs	r1, #44	; 0x2c
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	3342      	adds	r3, #66	; 0x42
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a6c:	e073      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3342      	adds	r3, #66	; 0x42
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	701a      	strb	r2, [r3, #0]
      break;
 8001a80:	e069      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a82:	78fb      	ldrb	r3, [r7, #3]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	212c      	movs	r1, #44	; 0x2c
 8001a88:	fb01 f303 	mul.w	r3, r1, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3354      	adds	r3, #84	; 0x54
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	212c      	movs	r1, #44	; 0x2c
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3342      	adds	r3, #66	; 0x42
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
      break;
 8001aa8:	e055      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aaa:	78fb      	ldrb	r3, [r7, #3]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	212c      	movs	r1, #44	; 0x2c
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	4413      	add	r3, r2
 8001ab6:	3342      	adds	r3, #66	; 0x42
 8001ab8:	2202      	movs	r2, #2
 8001aba:	701a      	strb	r2, [r3, #0]
      break;
 8001abc:	e04b      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001abe:	78bb      	ldrb	r3, [r7, #2]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d11d      	bne.n	8001b00 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ac4:	78fb      	ldrb	r3, [r7, #3]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	212c      	movs	r1, #44	; 0x2c
 8001aca:	fb01 f303 	mul.w	r3, r1, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	3355      	adds	r3, #85	; 0x55
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	212c      	movs	r1, #44	; 0x2c
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3342      	adds	r3, #66	; 0x42
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001aea:	e034      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3342      	adds	r3, #66	; 0x42
 8001afa:	2202      	movs	r2, #2
 8001afc:	701a      	strb	r2, [r3, #0]
      break;
 8001afe:	e02a      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3354      	adds	r3, #84	; 0x54
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d109      	bne.n	8001b28 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	212c      	movs	r1, #44	; 0x2c
 8001b1a:	fb01 f303 	mul.w	r3, r1, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	3342      	adds	r3, #66	; 0x42
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
      break;
 8001b26:	e016      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	212c      	movs	r1, #44	; 0x2c
 8001b2e:	fb01 f303 	mul.w	r3, r1, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	3342      	adds	r3, #66	; 0x42
 8001b36:	2202      	movs	r2, #2
 8001b38:	701a      	strb	r2, [r3, #0]
      break;
 8001b3a:	e00c      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b3c:	78fb      	ldrb	r3, [r7, #3]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	212c      	movs	r1, #44	; 0x2c
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	4413      	add	r3, r2
 8001b48:	3342      	adds	r3, #66	; 0x42
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
      break;
 8001b4e:	e002      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001b54:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	3344      	adds	r3, #68	; 0x44
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	8b3a      	ldrh	r2, [r7, #24]
 8001b6c:	6879      	ldr	r1, [r7, #4]
 8001b6e:	202c      	movs	r0, #44	; 0x2c
 8001b70:	fb00 f303 	mul.w	r3, r0, r3
 8001b74:	440b      	add	r3, r1
 8001b76:	334c      	adds	r3, #76	; 0x4c
 8001b78:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	212c      	movs	r1, #44	; 0x2c
 8001b80:	fb01 f303 	mul.w	r3, r1, r3
 8001b84:	4413      	add	r3, r2
 8001b86:	3360      	adds	r3, #96	; 0x60
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	212c      	movs	r1, #44	; 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	3350      	adds	r3, #80	; 0x50
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b9e:	78fb      	ldrb	r3, [r7, #3]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	212c      	movs	r1, #44	; 0x2c
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	3339      	adds	r3, #57	; 0x39
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3361      	adds	r3, #97	; 0x61
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	78fb      	ldrb	r3, [r7, #3]
 8001bc8:	222c      	movs	r2, #44	; 0x2c
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	3338      	adds	r3, #56	; 0x38
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	18d1      	adds	r1, r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	461a      	mov	r2, r3
 8001bdc:	f003 fb9e 	bl	800531c <USB_HC_StartXfer>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop

08001bec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 f8c1 	bl	8004d8a <USB_GetMode>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	f040 80f6 	bne.w	8001dfc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 f8a5 	bl	8004d64 <USB_ReadInterrupts>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80ec 	beq.w	8001dfa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 f89c 	bl	8004d64 <USB_ReadInterrupts>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c36:	d104      	bne.n	8001c42 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f003 f88c 	bl	8004d64 <USB_ReadInterrupts>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c56:	d104      	bne.n	8001c62 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 f87c 	bl	8004d64 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c76:	d104      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c80:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 f86c 	bl	8004d64 <USB_ReadInterrupts>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d103      	bne.n	8001c9e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 f85e 	bl	8004d64 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cb2:	d11c      	bne.n	8001cee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cbc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d10f      	bne.n	8001cee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001cce:	2110      	movs	r1, #16
 8001cd0:	6938      	ldr	r0, [r7, #16]
 8001cd2:	f002 ff6d 	bl	8004bb0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001cd6:	6938      	ldr	r0, [r7, #16]
 8001cd8:	f002 ff8e 	bl	8004bf8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f003 f946 	bl	8004f74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f005 fe19 	bl	8007920 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 f836 	bl	8004d64 <USB_ReadInterrupts>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d02:	d102      	bne.n	8001d0a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f001 fa03 	bl	8003110 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 f828 	bl	8004d64 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d106      	bne.n	8001d2c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f005 fde2 	bl	80078e8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 f817 	bl	8004d64 <USB_ReadInterrupts>
 8001d36:	4603      	mov	r3, r0
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b10      	cmp	r3, #16
 8001d3e:	d101      	bne.n	8001d44 <HAL_HCD_IRQHandler+0x158>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_HCD_IRQHandler+0x15a>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d012      	beq.n	8001d70 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0210 	bic.w	r2, r2, #16
 8001d58:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f001 f906 	bl	8002f6c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0210 	orr.w	r2, r2, #16
 8001d6e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 fff5 	bl	8004d64 <USB_ReadInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d84:	d13a      	bne.n	8001dfc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fc08 	bl	80055a0 <USB_HC_ReadInterrupt>
 8001d90:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e025      	b.n	8001de4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d018      	beq.n	8001dde <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	015a      	lsls	r2, r3, #5
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dc2:	d106      	bne.n	8001dd2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8ab 	bl	8001f26 <HCD_HC_IN_IRQHandler>
 8001dd0:	e005      	b.n	8001dde <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fcc6 	bl	800276a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	3301      	adds	r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d3d4      	bcc.n	8001d98 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df6:	615a      	str	r2, [r3, #20]
 8001df8:	e000      	b.n	8001dfc <HAL_HCD_IRQHandler+0x210>
      return;
 8001dfa:	bf00      	nop
    }
  }
}
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_HCD_Start+0x16>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e013      	b.n	8001e40 <HAL_HCD_Start+0x3e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 f908 	bl	800503c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f002 fe4f 	bl	8004ad4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_HCD_Stop+0x16>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e00d      	b.n	8001e7a <HAL_HCD_Stop+0x32>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fd02 	bl	8005874 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 f8aa 	bl	8004fe8 <USB_ResetPort>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	212c      	movs	r1, #44	; 0x2c
 8001eb0:	fb01 f303 	mul.w	r3, r1, r3
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3360      	adds	r3, #96	; 0x60
 8001eb8:	781b      	ldrb	r3, [r3, #0]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ed2:	78fb      	ldrb	r3, [r7, #3]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	212c      	movs	r1, #44	; 0x2c
 8001ed8:	fb01 f303 	mul.w	r3, r1, r3
 8001edc:	4413      	add	r3, r2
 8001ede:	3350      	adds	r3, #80	; 0x50
 8001ee0:	681b      	ldr	r3, [r3, #0]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 f8ee 	bl	80050dc <USB_GetCurrentFrame>
 8001f00:	4603      	mov	r3, r0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f003 f8c9 	bl	80050ae <USB_GetHostSpeed>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b086      	sub	sp, #24
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001f3c:	78fb      	ldrb	r3, [r7, #3]
 8001f3e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d119      	bne.n	8001f8a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	015a      	lsls	r2, r3, #5
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f62:	461a      	mov	r2, r3
 8001f64:	2304      	movs	r3, #4
 8001f66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	0151      	lsls	r1, r2, #5
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	440a      	add	r2, r1
 8001f7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f82:	f043 0302 	orr.w	r3, r3, #2
 8001f86:	60d3      	str	r3, [r2, #12]
 8001f88:	e101      	b.n	800218e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa0:	d12b      	bne.n	8001ffa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	212c      	movs	r1, #44	; 0x2c
 8001fbc:	fb01 f303 	mul.w	r3, r1, r3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	3361      	adds	r3, #97	; 0x61
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	015a      	lsls	r2, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4413      	add	r3, r2
 8001fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	0151      	lsls	r1, r2, #5
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	440a      	add	r2, r1
 8001fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 fae5 	bl	80055c2 <USB_HC_Halt>
 8001ff8:	e0c9      	b.n	800218e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	4413      	add	r3, r2
 8002002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b20      	cmp	r3, #32
 800200e:	d109      	bne.n	8002024 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	015a      	lsls	r2, r3, #5
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	4413      	add	r3, r2
 8002018:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201c:	461a      	mov	r2, r3
 800201e:	2320      	movs	r3, #32
 8002020:	6093      	str	r3, [r2, #8]
 8002022:	e0b4      	b.n	800218e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	015a      	lsls	r2, r3, #5
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	4413      	add	r3, r2
 800202c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	d133      	bne.n	80020a2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	015a      	lsls	r2, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	4413      	add	r3, r2
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	0151      	lsls	r1, r2, #5
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	440a      	add	r2, r1
 8002050:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002054:	f043 0302 	orr.w	r3, r3, #2
 8002058:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	212c      	movs	r1, #44	; 0x2c
 8002060:	fb01 f303 	mul.w	r3, r1, r3
 8002064:	4413      	add	r3, r2
 8002066:	3361      	adds	r3, #97	; 0x61
 8002068:	2205      	movs	r2, #5
 800206a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	015a      	lsls	r2, r3, #5
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	4413      	add	r3, r2
 8002074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002078:	461a      	mov	r2, r3
 800207a:	2310      	movs	r3, #16
 800207c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208a:	461a      	mov	r2, r3
 800208c:	2308      	movs	r3, #8
 800208e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f003 fa91 	bl	80055c2 <USB_HC_Halt>
 80020a0:	e075      	b.n	800218e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b8:	d134      	bne.n	8002124 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	0151      	lsls	r1, r2, #5
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	440a      	add	r2, r1
 80020d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	212c      	movs	r1, #44	; 0x2c
 80020e0:	fb01 f303 	mul.w	r3, r1, r3
 80020e4:	4413      	add	r3, r2
 80020e6:	3361      	adds	r3, #97	; 0x61
 80020e8:	2208      	movs	r2, #8
 80020ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	015a      	lsls	r2, r3, #5
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4413      	add	r3, r2
 80020f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f8:	461a      	mov	r2, r3
 80020fa:	2310      	movs	r3, #16
 80020fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	015a      	lsls	r2, r3, #5
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	4413      	add	r3, r2
 8002106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210a:	461a      	mov	r2, r3
 800210c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002110:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f003 fa50 	bl	80055c2 <USB_HC_Halt>
 8002122:	e034      	b.n	800218e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002136:	2b80      	cmp	r3, #128	; 0x80
 8002138:	d129      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4413      	add	r3, r2
 8002142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	0151      	lsls	r1, r2, #5
 800214c:	693a      	ldr	r2, [r7, #16]
 800214e:	440a      	add	r2, r1
 8002150:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002154:	f043 0302 	orr.w	r3, r3, #2
 8002158:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	212c      	movs	r1, #44	; 0x2c
 8002160:	fb01 f303 	mul.w	r3, r1, r3
 8002164:	4413      	add	r3, r2
 8002166:	3361      	adds	r3, #97	; 0x61
 8002168:	2206      	movs	r2, #6
 800216a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f003 fa23 	bl	80055c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002188:	461a      	mov	r2, r3
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a4:	d122      	bne.n	80021ec <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	0151      	lsls	r1, r2, #5
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	440a      	add	r2, r1
 80021bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	4611      	mov	r1, r2
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 f9f6 	bl	80055c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e2:	461a      	mov	r2, r3
 80021e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021ea:	e2ba      	b.n	8002762 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	015a      	lsls	r2, r3, #5
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4413      	add	r3, r2
 80021f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	f040 811b 	bne.w	800243a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d019      	beq.n	8002240 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3348      	adds	r3, #72	; 0x48
 800221a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	0159      	lsls	r1, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	440b      	add	r3, r1
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800222e:	1ad2      	subs	r2, r2, r3
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	202c      	movs	r0, #44	; 0x2c
 8002236:	fb00 f303 	mul.w	r3, r0, r3
 800223a:	440b      	add	r3, r1
 800223c:	3350      	adds	r3, #80	; 0x50
 800223e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3361      	adds	r3, #97	; 0x61
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	335c      	adds	r3, #92	; 0x5c
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	015a      	lsls	r2, r3, #5
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002270:	461a      	mov	r2, r3
 8002272:	2301      	movs	r3, #1
 8002274:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	212c      	movs	r1, #44	; 0x2c
 800227c:	fb01 f303 	mul.w	r3, r1, r3
 8002280:	4413      	add	r3, r2
 8002282:	333f      	adds	r3, #63	; 0x3f
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	212c      	movs	r1, #44	; 0x2c
 8002290:	fb01 f303 	mul.w	r3, r1, r3
 8002294:	4413      	add	r3, r2
 8002296:	333f      	adds	r3, #63	; 0x3f
 8002298:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800229a:	2b02      	cmp	r3, #2
 800229c:	d121      	bne.n	80022e2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	015a      	lsls	r2, r3, #5
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4413      	add	r3, r2
 80022a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	0151      	lsls	r1, r2, #5
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	440a      	add	r2, r1
 80022b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	4611      	mov	r1, r2
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f97a 	bl	80055c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022da:	461a      	mov	r2, r3
 80022dc:	2310      	movs	r3, #16
 80022de:	6093      	str	r3, [r2, #8]
 80022e0:	e066      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	333f      	adds	r3, #63	; 0x3f
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d127      	bne.n	8002346 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	0151      	lsls	r1, r2, #5
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	440a      	add	r2, r1
 800230c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002310:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002314:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	212c      	movs	r1, #44	; 0x2c
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	4413      	add	r3, r2
 8002322:	3360      	adds	r3, #96	; 0x60
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	b2d9      	uxtb	r1, r3
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	202c      	movs	r0, #44	; 0x2c
 8002332:	fb00 f303 	mul.w	r3, r0, r3
 8002336:	4413      	add	r3, r2
 8002338:	3360      	adds	r3, #96	; 0x60
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f005 fafc 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002344:	e034      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	212c      	movs	r1, #44	; 0x2c
 800234c:	fb01 f303 	mul.w	r3, r1, r3
 8002350:	4413      	add	r3, r2
 8002352:	333f      	adds	r3, #63	; 0x3f
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d12a      	bne.n	80023b0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	3360      	adds	r3, #96	; 0x60
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3354      	adds	r3, #84	; 0x54
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2d8      	uxtb	r0, r3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	212c      	movs	r1, #44	; 0x2c
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	4413      	add	r3, r2
 800238e:	3354      	adds	r3, #84	; 0x54
 8002390:	4602      	mov	r2, r0
 8002392:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	b2d9      	uxtb	r1, r3
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	202c      	movs	r0, #44	; 0x2c
 800239e:	fb00 f303 	mul.w	r3, r0, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3360      	adds	r3, #96	; 0x60
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f005 fac6 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d12b      	bne.n	8002410 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	212c      	movs	r1, #44	; 0x2c
 80023be:	fb01 f303 	mul.w	r3, r1, r3
 80023c2:	4413      	add	r3, r2
 80023c4:	3348      	adds	r3, #72	; 0x48
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	202c      	movs	r0, #44	; 0x2c
 80023ce:	fb00 f202 	mul.w	r2, r0, r2
 80023d2:	440a      	add	r2, r1
 80023d4:	3240      	adds	r2, #64	; 0x40
 80023d6:	8812      	ldrh	r2, [r2, #0]
 80023d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 81be 	beq.w	8002762 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	212c      	movs	r1, #44	; 0x2c
 80023ec:	fb01 f303 	mul.w	r3, r1, r3
 80023f0:	4413      	add	r3, r2
 80023f2:	3354      	adds	r3, #84	; 0x54
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	f083 0301 	eor.w	r3, r3, #1
 80023fa:	b2d8      	uxtb	r0, r3
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	212c      	movs	r1, #44	; 0x2c
 8002402:	fb01 f303 	mul.w	r3, r1, r3
 8002406:	4413      	add	r3, r2
 8002408:	3354      	adds	r3, #84	; 0x54
 800240a:	4602      	mov	r2, r0
 800240c:	701a      	strb	r2, [r3, #0]
}
 800240e:	e1a8      	b.n	8002762 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	212c      	movs	r1, #44	; 0x2c
 8002416:	fb01 f303 	mul.w	r3, r1, r3
 800241a:	4413      	add	r3, r2
 800241c:	3354      	adds	r3, #84	; 0x54
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f083 0301 	eor.w	r3, r3, #1
 8002424:	b2d8      	uxtb	r0, r3
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	212c      	movs	r1, #44	; 0x2c
 800242c:	fb01 f303 	mul.w	r3, r1, r3
 8002430:	4413      	add	r3, r2
 8002432:	3354      	adds	r3, #84	; 0x54
 8002434:	4602      	mov	r2, r0
 8002436:	701a      	strb	r2, [r3, #0]
}
 8002438:	e193      	b.n	8002762 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b02      	cmp	r3, #2
 800244e:	f040 8106 	bne.w	800265e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	015a      	lsls	r2, r3, #5
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	4413      	add	r3, r2
 800245a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	0151      	lsls	r1, r2, #5
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	440a      	add	r2, r1
 8002468:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800246c:	f023 0302 	bic.w	r3, r3, #2
 8002470:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3361      	adds	r3, #97	; 0x61
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d109      	bne.n	800249a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3360      	adds	r3, #96	; 0x60
 8002494:	2201      	movs	r2, #1
 8002496:	701a      	strb	r2, [r3, #0]
 8002498:	e0c9      	b.n	800262e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	3361      	adds	r3, #97	; 0x61
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d109      	bne.n	80024c2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	212c      	movs	r1, #44	; 0x2c
 80024b4:	fb01 f303 	mul.w	r3, r1, r3
 80024b8:	4413      	add	r3, r2
 80024ba:	3360      	adds	r3, #96	; 0x60
 80024bc:	2205      	movs	r2, #5
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e0b5      	b.n	800262e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	212c      	movs	r1, #44	; 0x2c
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	4413      	add	r3, r2
 80024ce:	3361      	adds	r3, #97	; 0x61
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d009      	beq.n	80024ea <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	212c      	movs	r1, #44	; 0x2c
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	4413      	add	r3, r2
 80024e2:	3361      	adds	r3, #97	; 0x61
 80024e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d150      	bne.n	800258c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	212c      	movs	r1, #44	; 0x2c
 80024f0:	fb01 f303 	mul.w	r3, r1, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	335c      	adds	r3, #92	; 0x5c
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	202c      	movs	r0, #44	; 0x2c
 8002502:	fb00 f303 	mul.w	r3, r0, r3
 8002506:	440b      	add	r3, r1
 8002508:	335c      	adds	r3, #92	; 0x5c
 800250a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	335c      	adds	r3, #92	; 0x5c
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d912      	bls.n	8002546 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	335c      	adds	r3, #92	; 0x5c
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	fb01 f303 	mul.w	r3, r1, r3
 800253c:	4413      	add	r3, r2
 800253e:	3360      	adds	r3, #96	; 0x60
 8002540:	2204      	movs	r2, #4
 8002542:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002544:	e073      	b.n	800262e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	212c      	movs	r1, #44	; 0x2c
 800254c:	fb01 f303 	mul.w	r3, r1, r3
 8002550:	4413      	add	r3, r2
 8002552:	3360      	adds	r3, #96	; 0x60
 8002554:	2202      	movs	r2, #2
 8002556:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	015a      	lsls	r2, r3, #5
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4413      	add	r3, r2
 8002560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800256e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002576:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4413      	add	r3, r2
 8002580:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800258a:	e050      	b.n	800262e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	3361      	adds	r3, #97	; 0x61
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d122      	bne.n	80025e6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	212c      	movs	r1, #44	; 0x2c
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	3360      	adds	r3, #96	; 0x60
 80025ae:	2202      	movs	r2, #2
 80025b0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025c8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025d0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025de:	461a      	mov	r2, r3
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	e023      	b.n	800262e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	212c      	movs	r1, #44	; 0x2c
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	3361      	adds	r3, #97	; 0x61
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b07      	cmp	r3, #7
 80025f8:	d119      	bne.n	800262e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	335c      	adds	r3, #92	; 0x5c
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	202c      	movs	r0, #44	; 0x2c
 8002612:	fb00 f303 	mul.w	r3, r0, r3
 8002616:	440b      	add	r3, r1
 8002618:	335c      	adds	r3, #92	; 0x5c
 800261a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3360      	adds	r3, #96	; 0x60
 800262a:	2204      	movs	r2, #4
 800262c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	461a      	mov	r2, r3
 800263c:	2302      	movs	r3, #2
 800263e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	b2d9      	uxtb	r1, r3
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	202c      	movs	r0, #44	; 0x2c
 800264a:	fb00 f303 	mul.w	r3, r0, r3
 800264e:	4413      	add	r3, r2
 8002650:	3360      	adds	r3, #96	; 0x60
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f005 f970 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800265c:	e081      	b.n	8002762 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	015a      	lsls	r2, r3, #5
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4413      	add	r3, r2
 8002666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b10      	cmp	r3, #16
 8002672:	d176      	bne.n	8002762 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	212c      	movs	r1, #44	; 0x2c
 800267a:	fb01 f303 	mul.w	r3, r1, r3
 800267e:	4413      	add	r3, r2
 8002680:	333f      	adds	r3, #63	; 0x3f
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b03      	cmp	r3, #3
 8002686:	d121      	bne.n	80026cc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	335c      	adds	r3, #92	; 0x5c
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	0151      	lsls	r1, r2, #5
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	440a      	add	r2, r1
 80026b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f002 ff7c 	bl	80055c2 <USB_HC_Halt>
 80026ca:	e041      	b.n	8002750 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	212c      	movs	r1, #44	; 0x2c
 80026d2:	fb01 f303 	mul.w	r3, r1, r3
 80026d6:	4413      	add	r3, r2
 80026d8:	333f      	adds	r3, #63	; 0x3f
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d009      	beq.n	80026f4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	212c      	movs	r1, #44	; 0x2c
 80026e6:	fb01 f303 	mul.w	r3, r1, r3
 80026ea:	4413      	add	r3, r2
 80026ec:	333f      	adds	r3, #63	; 0x3f
 80026ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d12d      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	212c      	movs	r1, #44	; 0x2c
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	4413      	add	r3, r2
 8002700:	335c      	adds	r3, #92	; 0x5c
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d120      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	3361      	adds	r3, #97	; 0x61
 800271c:	2203      	movs	r2, #3
 800271e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	0151      	lsls	r1, r2, #5
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	440a      	add	r2, r1
 8002736:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800273a:	f043 0302 	orr.w	r3, r3, #2
 800273e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f002 ff39 	bl	80055c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	461a      	mov	r2, r3
 800275e:	2310      	movs	r3, #16
 8002760:	6093      	str	r3, [r2, #8]
}
 8002762:	bf00      	nop
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b088      	sub	sp, #32
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	460b      	mov	r3, r1
 8002774:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b04      	cmp	r3, #4
 8002798:	d119      	bne.n	80027ce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	461a      	mov	r2, r3
 80027a8:	2304      	movs	r3, #4
 80027aa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	0151      	lsls	r1, r2, #5
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	440a      	add	r2, r1
 80027c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c6:	f043 0302 	orr.w	r3, r3, #2
 80027ca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80027cc:	e3ca      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b20      	cmp	r3, #32
 80027e2:	d13e      	bne.n	8002862 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	461a      	mov	r2, r3
 80027f2:	2320      	movs	r3, #32
 80027f4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	333d      	adds	r3, #61	; 0x3d
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b01      	cmp	r3, #1
 8002808:	f040 83ac 	bne.w	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	333d      	adds	r3, #61	; 0x3d
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	3360      	adds	r3, #96	; 0x60
 800282c:	2202      	movs	r2, #2
 800282e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	0151      	lsls	r1, r2, #5
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	440a      	add	r2, r1
 8002846:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f002 feb1 	bl	80055c2 <USB_HC_Halt>
}
 8002860:	e380      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002878:	d122      	bne.n	80028c0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	0151      	lsls	r1, r2, #5
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	440a      	add	r2, r1
 8002890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f002 fe8c 	bl	80055c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	461a      	mov	r2, r3
 80028b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028bc:	6093      	str	r3, [r2, #8]
}
 80028be:	e351      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	015a      	lsls	r2, r3, #5
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	4413      	add	r3, r2
 80028c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d150      	bne.n	8002978 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	212c      	movs	r1, #44	; 0x2c
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	335c      	adds	r3, #92	; 0x5c
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	015a      	lsls	r2, r3, #5
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	4413      	add	r3, r2
 80028f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d111      	bne.n	8002922 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	333d      	adds	r3, #61	; 0x3d
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291c:	461a      	mov	r2, r3
 800291e:	2340      	movs	r3, #64	; 0x40
 8002920:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4413      	add	r3, r2
 800292a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	0151      	lsls	r1, r2, #5
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	440a      	add	r2, r1
 8002938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293c:	f043 0302 	orr.w	r3, r3, #2
 8002940:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f002 fe38 	bl	80055c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	2301      	movs	r3, #1
 8002962:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	212c      	movs	r1, #44	; 0x2c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	3361      	adds	r3, #97	; 0x61
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
}
 8002976:	e2f5      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	015a      	lsls	r2, r3, #5
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	4413      	add	r3, r2
 8002980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	2b40      	cmp	r3, #64	; 0x40
 800298c:	d13c      	bne.n	8002a08 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	2204      	movs	r2, #4
 800299e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	212c      	movs	r1, #44	; 0x2c
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	333d      	adds	r3, #61	; 0x3d
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029de:	f043 0302 	orr.w	r3, r3, #2
 80029e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	4611      	mov	r1, r2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 fde7 	bl	80055c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a00:	461a      	mov	r2, r3
 8002a02:	2340      	movs	r3, #64	; 0x40
 8002a04:	6093      	str	r3, [r2, #8]
}
 8002a06:	e2ad      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	015a      	lsls	r2, r3, #5
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	4413      	add	r3, r2
 8002a10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b08      	cmp	r3, #8
 8002a1c:	d12a      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	015a      	lsls	r2, r3, #5
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	4413      	add	r3, r2
 8002a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	0151      	lsls	r1, r2, #5
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	440a      	add	r2, r1
 8002a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 fdb1 	bl	80055c2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3361      	adds	r3, #97	; 0x61
 8002a6e:	2205      	movs	r2, #5
 8002a70:	701a      	strb	r2, [r3, #0]
}
 8002a72:	e277      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b10      	cmp	r3, #16
 8002a88:	d150      	bne.n	8002b2c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	212c      	movs	r1, #44	; 0x2c
 8002a90:	fb01 f303 	mul.w	r3, r1, r3
 8002a94:	4413      	add	r3, r2
 8002a96:	335c      	adds	r3, #92	; 0x5c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	212c      	movs	r1, #44	; 0x2c
 8002aa2:	fb01 f303 	mul.w	r3, r1, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3361      	adds	r3, #97	; 0x61
 8002aaa:	2203      	movs	r2, #3
 8002aac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	212c      	movs	r1, #44	; 0x2c
 8002ab4:	fb01 f303 	mul.w	r3, r1, r3
 8002ab8:	4413      	add	r3, r2
 8002aba:	333d      	adds	r3, #61	; 0x3d
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d112      	bne.n	8002ae8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	333c      	adds	r3, #60	; 0x3c
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d108      	bne.n	8002ae8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	212c      	movs	r1, #44	; 0x2c
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	333d      	adds	r3, #61	; 0x3d
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	015a      	lsls	r2, r3, #5
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	4413      	add	r3, r2
 8002af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	0151      	lsls	r1, r2, #5
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	440a      	add	r2, r1
 8002afe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b02:	f043 0302 	orr.w	r3, r3, #2
 8002b06:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	4611      	mov	r1, r2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f002 fd55 	bl	80055c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b24:	461a      	mov	r2, r3
 8002b26:	2310      	movs	r3, #16
 8002b28:	6093      	str	r3, [r2, #8]
}
 8002b2a:	e21b      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d174      	bne.n	8002c2c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d121      	bne.n	8002b8e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	212c      	movs	r1, #44	; 0x2c
 8002b50:	fb01 f303 	mul.w	r3, r1, r3
 8002b54:	4413      	add	r3, r2
 8002b56:	3361      	adds	r3, #97	; 0x61
 8002b58:	2206      	movs	r2, #6
 8002b5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	0151      	lsls	r1, r2, #5
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	440a      	add	r2, r1
 8002b72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 fd1b 	bl	80055c2 <USB_HC_Halt>
 8002b8c:	e044      	b.n	8002c18 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	212c      	movs	r1, #44	; 0x2c
 8002b94:	fb01 f303 	mul.w	r3, r1, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	335c      	adds	r3, #92	; 0x5c
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	202c      	movs	r0, #44	; 0x2c
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	440b      	add	r3, r1
 8002bac:	335c      	adds	r3, #92	; 0x5c
 8002bae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	212c      	movs	r1, #44	; 0x2c
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	4413      	add	r3, r2
 8002bbc:	335c      	adds	r3, #92	; 0x5c
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d920      	bls.n	8002c06 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	212c      	movs	r1, #44	; 0x2c
 8002bca:	fb01 f303 	mul.w	r3, r1, r3
 8002bce:	4413      	add	r3, r2
 8002bd0:	335c      	adds	r3, #92	; 0x5c
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3360      	adds	r3, #96	; 0x60
 8002be4:	2204      	movs	r2, #4
 8002be6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	b2d9      	uxtb	r1, r3
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	202c      	movs	r0, #44	; 0x2c
 8002bf2:	fb00 f303 	mul.w	r3, r0, r3
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3360      	adds	r3, #96	; 0x60
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f004 fe9c 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c04:	e008      	b.n	8002c18 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	3360      	adds	r3, #96	; 0x60
 8002c14:	2202      	movs	r2, #2
 8002c16:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c24:	461a      	mov	r2, r3
 8002c26:	2380      	movs	r3, #128	; 0x80
 8002c28:	6093      	str	r3, [r2, #8]
}
 8002c2a:	e19b      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c42:	d134      	bne.n	8002cae <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	0151      	lsls	r1, r2, #5
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	440a      	add	r2, r1
 8002c5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f002 fca7 	bl	80055c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	461a      	mov	r2, r3
 8002c82:	2310      	movs	r3, #16
 8002c84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	015a      	lsls	r2, r3, #5
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c92:	461a      	mov	r2, r3
 8002c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3361      	adds	r3, #97	; 0x61
 8002ca8:	2208      	movs	r2, #8
 8002caa:	701a      	strb	r2, [r3, #0]
}
 8002cac:	e15a      	b.n	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	f040 814f 	bne.w	8002f64 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	0151      	lsls	r1, r2, #5
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	440a      	add	r2, r1
 8002cdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ce0:	f023 0302 	bic.w	r3, r3, #2
 8002ce4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	212c      	movs	r1, #44	; 0x2c
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3361      	adds	r3, #97	; 0x61
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d17d      	bne.n	8002df6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	212c      	movs	r1, #44	; 0x2c
 8002d00:	fb01 f303 	mul.w	r3, r1, r3
 8002d04:	4413      	add	r3, r2
 8002d06:	3360      	adds	r3, #96	; 0x60
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	333f      	adds	r3, #63	; 0x3f
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d00a      	beq.n	8002d36 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	333f      	adds	r3, #63	; 0x3f
 8002d2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d30:	2b03      	cmp	r3, #3
 8002d32:	f040 8100 	bne.w	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d113      	bne.n	8002d66 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	212c      	movs	r1, #44	; 0x2c
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	3355      	adds	r3, #85	; 0x55
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2d8      	uxtb	r0, r3
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3355      	adds	r3, #85	; 0x55
 8002d62:	4602      	mov	r2, r0
 8002d64:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	f040 80e3 	bne.w	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	212c      	movs	r1, #44	; 0x2c
 8002d76:	fb01 f303 	mul.w	r3, r1, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	334c      	adds	r3, #76	; 0x4c
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 80d8 	beq.w	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	334c      	adds	r3, #76	; 0x4c
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	202c      	movs	r0, #44	; 0x2c
 8002d9c:	fb00 f202 	mul.w	r2, r0, r2
 8002da0:	440a      	add	r2, r1
 8002da2:	3240      	adds	r2, #64	; 0x40
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	4413      	add	r3, r2
 8002da8:	3b01      	subs	r3, #1
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	202c      	movs	r0, #44	; 0x2c
 8002db0:	fb00 f202 	mul.w	r2, r0, r2
 8002db4:	440a      	add	r2, r1
 8002db6:	3240      	adds	r2, #64	; 0x40
 8002db8:	8812      	ldrh	r2, [r2, #0]
 8002dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 80b5 	beq.w	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	212c      	movs	r1, #44	; 0x2c
 8002dd2:	fb01 f303 	mul.w	r3, r1, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3355      	adds	r3, #85	; 0x55
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f083 0301 	eor.w	r3, r3, #1
 8002de0:	b2d8      	uxtb	r0, r3
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	212c      	movs	r1, #44	; 0x2c
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	3355      	adds	r3, #85	; 0x55
 8002df0:	4602      	mov	r2, r0
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e09f      	b.n	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	3361      	adds	r3, #97	; 0x61
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d109      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	212c      	movs	r1, #44	; 0x2c
 8002e10:	fb01 f303 	mul.w	r3, r1, r3
 8002e14:	4413      	add	r3, r2
 8002e16:	3360      	adds	r3, #96	; 0x60
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
 8002e1c:	e08b      	b.n	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	3361      	adds	r3, #97	; 0x61
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d109      	bne.n	8002e46 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	212c      	movs	r1, #44	; 0x2c
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	3360      	adds	r3, #96	; 0x60
 8002e40:	2202      	movs	r2, #2
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e077      	b.n	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3361      	adds	r3, #97	; 0x61
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b05      	cmp	r3, #5
 8002e58:	d109      	bne.n	8002e6e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	3360      	adds	r3, #96	; 0x60
 8002e68:	2205      	movs	r2, #5
 8002e6a:	701a      	strb	r2, [r3, #0]
 8002e6c:	e063      	b.n	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	212c      	movs	r1, #44	; 0x2c
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	3361      	adds	r3, #97	; 0x61
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b06      	cmp	r3, #6
 8002e80:	d009      	beq.n	8002e96 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3361      	adds	r3, #97	; 0x61
 8002e90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d14f      	bne.n	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	335c      	adds	r3, #92	; 0x5c
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	202c      	movs	r0, #44	; 0x2c
 8002eae:	fb00 f303 	mul.w	r3, r0, r3
 8002eb2:	440b      	add	r3, r1
 8002eb4:	335c      	adds	r3, #92	; 0x5c
 8002eb6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	212c      	movs	r1, #44	; 0x2c
 8002ebe:	fb01 f303 	mul.w	r3, r1, r3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	335c      	adds	r3, #92	; 0x5c
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d912      	bls.n	8002ef2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	212c      	movs	r1, #44	; 0x2c
 8002ed2:	fb01 f303 	mul.w	r3, r1, r3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	335c      	adds	r3, #92	; 0x5c
 8002eda:	2200      	movs	r2, #0
 8002edc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	212c      	movs	r1, #44	; 0x2c
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	3360      	adds	r3, #96	; 0x60
 8002eec:	2204      	movs	r2, #4
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e021      	b.n	8002f36 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3360      	adds	r3, #96	; 0x60
 8002f00:	2202      	movs	r2, #2
 8002f02:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f1a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f22:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	461a      	mov	r2, r3
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f42:	461a      	mov	r2, r3
 8002f44:	2302      	movs	r3, #2
 8002f46:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	b2d9      	uxtb	r1, r3
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	202c      	movs	r0, #44	; 0x2c
 8002f52:	fb00 f303 	mul.w	r3, r0, r3
 8002f56:	4413      	add	r3, r2
 8002f58:	3360      	adds	r3, #96	; 0x60
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f004 fcec 	bl	800793c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f64:	bf00      	nop
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	0c5b      	lsrs	r3, r3, #17
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d004      	beq.n	8002fb2 <HCD_RXQLVL_IRQHandler+0x46>
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	f000 80a9 	beq.w	8003102 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fb0:	e0aa      	b.n	8003108 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a6 	beq.w	8003106 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3344      	adds	r3, #68	; 0x44
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 809b 	beq.w	8003106 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	212c      	movs	r1, #44	; 0x2c
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	4413      	add	r3, r2
 8002fdc:	3350      	adds	r3, #80	; 0x50
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	441a      	add	r2, r3
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	202c      	movs	r0, #44	; 0x2c
 8002fea:	fb00 f303 	mul.w	r3, r0, r3
 8002fee:	440b      	add	r3, r1
 8002ff0:	334c      	adds	r3, #76	; 0x4c
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d87a      	bhi.n	80030ee <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6818      	ldr	r0, [r3, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	212c      	movs	r1, #44	; 0x2c
 8003002:	fb01 f303 	mul.w	r3, r1, r3
 8003006:	4413      	add	r3, r2
 8003008:	3344      	adds	r3, #68	; 0x44
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	b292      	uxth	r2, r2
 8003010:	4619      	mov	r1, r3
 8003012:	f001 fe4f 	bl	8004cb4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	212c      	movs	r1, #44	; 0x2c
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	4413      	add	r3, r2
 8003022:	3344      	adds	r3, #68	; 0x44
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	441a      	add	r2, r3
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	202c      	movs	r0, #44	; 0x2c
 8003030:	fb00 f303 	mul.w	r3, r0, r3
 8003034:	440b      	add	r3, r1
 8003036:	3344      	adds	r3, #68	; 0x44
 8003038:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3350      	adds	r3, #80	; 0x50
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	441a      	add	r2, r3
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	202c      	movs	r0, #44	; 0x2c
 8003054:	fb00 f303 	mul.w	r3, r0, r3
 8003058:	440b      	add	r3, r1
 800305a:	3350      	adds	r3, #80	; 0x50
 800305c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	0cdb      	lsrs	r3, r3, #19
 800306e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003072:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	212c      	movs	r1, #44	; 0x2c
 800307a:	fb01 f303 	mul.w	r3, r1, r3
 800307e:	4413      	add	r3, r2
 8003080:	3340      	adds	r3, #64	; 0x40
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4293      	cmp	r3, r2
 800308a:	d13c      	bne.n	8003106 <HCD_RXQLVL_IRQHandler+0x19a>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d039      	beq.n	8003106 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030a8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030b0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030be:	461a      	mov	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3354      	adds	r3, #84	; 0x54
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	f083 0301 	eor.w	r3, r3, #1
 80030d8:	b2d8      	uxtb	r0, r3
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3354      	adds	r3, #84	; 0x54
 80030e8:	4602      	mov	r2, r0
 80030ea:	701a      	strb	r2, [r3, #0]
      break;
 80030ec:	e00b      	b.n	8003106 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	212c      	movs	r1, #44	; 0x2c
 80030f4:	fb01 f303 	mul.w	r3, r1, r3
 80030f8:	4413      	add	r3, r2
 80030fa:	3360      	adds	r3, #96	; 0x60
 80030fc:	2204      	movs	r2, #4
 80030fe:	701a      	strb	r2, [r3, #0]
      break;
 8003100:	e001      	b.n	8003106 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003106:	bf00      	nop
  }
}
 8003108:	bf00      	nop
 800310a:	3728      	adds	r7, #40	; 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800313c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b02      	cmp	r3, #2
 8003146:	d10b      	bne.n	8003160 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f004 fbd6 	bl	8007904 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b08      	cmp	r3, #8
 8003168:	d132      	bne.n	80031d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f043 0308 	orr.w	r3, r3, #8
 8003170:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d126      	bne.n	80031ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d113      	bne.n	80031ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800318a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800318e:	d106      	bne.n	800319e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2102      	movs	r1, #2
 8003196:	4618      	mov	r0, r3
 8003198:	f001 feec 	bl	8004f74 <USB_InitFSLSPClkSel>
 800319c:	e011      	b.n	80031c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2101      	movs	r1, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 fee5 	bl	8004f74 <USB_InitFSLSPClkSel>
 80031aa:	e00a      	b.n	80031c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d106      	bne.n	80031c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031ba:	461a      	mov	r2, r3
 80031bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f004 fbc8 	bl	8007958 <HAL_HCD_PortEnabled_Callback>
 80031c8:	e002      	b.n	80031d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f004 fbd2 	bl	8007974 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 0320 	and.w	r3, r3, #32
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d103      	bne.n	80031e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f043 0320 	orr.w	r3, r3, #32
 80031e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031e8:	461a      	mov	r2, r3
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	6013      	str	r3, [r2, #0]
}
 80031ee:	bf00      	nop
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e12b      	b.n	8003462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd faba 	bl	8000798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800324a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800325a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800325c:	f001 f9fc 	bl	8004658 <HAL_RCC_GetPCLK1Freq>
 8003260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4a81      	ldr	r2, [pc, #516]	; (800346c <HAL_I2C_Init+0x274>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d807      	bhi.n	800327c <HAL_I2C_Init+0x84>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4a80      	ldr	r2, [pc, #512]	; (8003470 <HAL_I2C_Init+0x278>)
 8003270:	4293      	cmp	r3, r2
 8003272:	bf94      	ite	ls
 8003274:	2301      	movls	r3, #1
 8003276:	2300      	movhi	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e006      	b.n	800328a <HAL_I2C_Init+0x92>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a7d      	ldr	r2, [pc, #500]	; (8003474 <HAL_I2C_Init+0x27c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	bf94      	ite	ls
 8003284:	2301      	movls	r3, #1
 8003286:	2300      	movhi	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0e7      	b.n	8003462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a78      	ldr	r2, [pc, #480]	; (8003478 <HAL_I2C_Init+0x280>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0c9b      	lsrs	r3, r3, #18
 800329c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a6a      	ldr	r2, [pc, #424]	; (800346c <HAL_I2C_Init+0x274>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d802      	bhi.n	80032cc <HAL_I2C_Init+0xd4>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	e009      	b.n	80032e0 <HAL_I2C_Init+0xe8>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	4a69      	ldr	r2, [pc, #420]	; (800347c <HAL_I2C_Init+0x284>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	3301      	adds	r3, #1
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	495c      	ldr	r1, [pc, #368]	; (800346c <HAL_I2C_Init+0x274>)
 80032fc:	428b      	cmp	r3, r1
 80032fe:	d819      	bhi.n	8003334 <HAL_I2C_Init+0x13c>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e59      	subs	r1, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	fbb1 f3f3 	udiv	r3, r1, r3
 800330e:	1c59      	adds	r1, r3, #1
 8003310:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003314:	400b      	ands	r3, r1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_I2C_Init+0x138>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1e59      	subs	r1, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fbb1 f3f3 	udiv	r3, r1, r3
 8003328:	3301      	adds	r3, #1
 800332a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332e:	e051      	b.n	80033d4 <HAL_I2C_Init+0x1dc>
 8003330:	2304      	movs	r3, #4
 8003332:	e04f      	b.n	80033d4 <HAL_I2C_Init+0x1dc>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d111      	bne.n	8003360 <HAL_I2C_Init+0x168>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1e58      	subs	r0, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	440b      	add	r3, r1
 800334a:	fbb0 f3f3 	udiv	r3, r0, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e012      	b.n	8003386 <HAL_I2C_Init+0x18e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e58      	subs	r0, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	0099      	lsls	r1, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	fbb0 f3f3 	udiv	r3, r0, r3
 8003376:	3301      	adds	r3, #1
 8003378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Init+0x196>
 800338a:	2301      	movs	r3, #1
 800338c:	e022      	b.n	80033d4 <HAL_I2C_Init+0x1dc>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10e      	bne.n	80033b4 <HAL_I2C_Init+0x1bc>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e58      	subs	r0, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	440b      	add	r3, r1
 80033a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b2:	e00f      	b.n	80033d4 <HAL_I2C_Init+0x1dc>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e58      	subs	r0, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	0099      	lsls	r1, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	6809      	ldr	r1, [r1, #0]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6911      	ldr	r1, [r2, #16]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	4311      	orrs	r1, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	430b      	orrs	r3, r1
 8003416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	000186a0 	.word	0x000186a0
 8003470:	001e847f 	.word	0x001e847f
 8003474:	003d08ff 	.word	0x003d08ff
 8003478:	431bde83 	.word	0x431bde83
 800347c:	10624dd3 	.word	0x10624dd3

08003480 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e128      	b.n	80036e4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a90      	ldr	r2, [pc, #576]	; (80036ec <HAL_I2S_Init+0x26c>)
 80034aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7fd f9eb 	bl	8000888 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034c8:	f023 030f 	bic.w	r3, r3, #15
 80034cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2202      	movs	r2, #2
 80034d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d060      	beq.n	80035a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034e6:	2310      	movs	r3, #16
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e001      	b.n	80034f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034ec:	2320      	movs	r3, #32
 80034ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d802      	bhi.n	80034fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80034fe:	2001      	movs	r0, #1
 8003500:	f001 f9a0 	bl	8004844 <HAL_RCCEx_GetPeriphCLKFreq>
 8003504:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350e:	d125      	bne.n	800355c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	3305      	adds	r3, #5
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	e01f      	b.n	800357a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	fbb2 f2f3 	udiv	r2, r2, r3
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	3305      	adds	r3, #5
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	e00e      	b.n	800357a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fbb2 f2f3 	udiv	r2, r2, r3
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	3305      	adds	r3, #5
 8003578:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4a5c      	ldr	r2, [pc, #368]	; (80036f0 <HAL_I2S_Init+0x270>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e003      	b.n	80035a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035a0:	2302      	movs	r3, #2
 80035a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d902      	bls.n	80035b4 <HAL_I2S_Init+0x134>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2bff      	cmp	r3, #255	; 0xff
 80035b2:	d907      	bls.n	80035c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	f043 0210 	orr.w	r2, r3, #16
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e08f      	b.n	80036e4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	ea42 0103 	orr.w	r1, r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035e2:	f023 030f 	bic.w	r3, r3, #15
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6851      	ldr	r1, [r2, #4]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6892      	ldr	r2, [r2, #8]
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68d2      	ldr	r2, [r2, #12]
 80035f4:	4311      	orrs	r1, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6992      	ldr	r2, [r2, #24]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003606:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d161      	bne.n	80036d4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a38      	ldr	r2, [pc, #224]	; (80036f4 <HAL_I2S_Init+0x274>)
 8003614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a37      	ldr	r2, [pc, #220]	; (80036f8 <HAL_I2S_Init+0x278>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_I2S_Init+0x1a4>
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_I2S_Init+0x27c>)
 8003622:	e001      	b.n	8003628 <HAL_I2S_Init+0x1a8>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	4932      	ldr	r1, [pc, #200]	; (80036f8 <HAL_I2S_Init+0x278>)
 8003630:	428a      	cmp	r2, r1
 8003632:	d101      	bne.n	8003638 <HAL_I2S_Init+0x1b8>
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_I2S_Init+0x27c>)
 8003636:	e001      	b.n	800363c <HAL_I2S_Init+0x1bc>
 8003638:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800363c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003640:	f023 030f 	bic.w	r3, r3, #15
 8003644:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <HAL_I2S_Init+0x278>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_I2S_Init+0x1d4>
 8003650:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_I2S_Init+0x27c>)
 8003652:	e001      	b.n	8003658 <HAL_I2S_Init+0x1d8>
 8003654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003658:	2202      	movs	r2, #2
 800365a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <HAL_I2S_Init+0x278>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_I2S_Init+0x1ea>
 8003666:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_I2S_Init+0x27c>)
 8003668:	e001      	b.n	800366e <HAL_I2S_Init+0x1ee>
 800366a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367a:	d003      	beq.n	8003684 <HAL_I2S_Init+0x204>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d103      	bne.n	800368c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e001      	b.n	8003690 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800369a:	4313      	orrs	r3, r2
 800369c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036ae:	4313      	orrs	r3, r2
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	897b      	ldrh	r3, [r7, #10]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036bc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <HAL_I2S_Init+0x278>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_I2S_Init+0x24c>
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_I2S_Init+0x27c>)
 80036ca:	e001      	b.n	80036d0 <HAL_I2S_Init+0x250>
 80036cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d0:	897a      	ldrh	r2, [r7, #10]
 80036d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	080037f7 	.word	0x080037f7
 80036f0:	cccccccd 	.word	0xcccccccd
 80036f4:	0800390d 	.word	0x0800390d
 80036f8:	40003800 	.word	0x40003800
 80036fc:	40003400 	.word	0x40003400

08003700 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10e      	bne.n	8003790 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffb8 	bl	8003700 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	b292      	uxth	r2, r2
 80037ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	1c9a      	adds	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10e      	bne.n	80037ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff93 	bl	8003714 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b04      	cmp	r3, #4
 8003810:	d13a      	bne.n	8003888 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d109      	bne.n	8003830 <I2S_IRQHandler+0x3a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d102      	bne.n	8003830 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ffb4 	bl	8003798 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d126      	bne.n	8003888 <I2S_IRQHandler+0x92>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b20      	cmp	r3, #32
 8003846:	d11f      	bne.n	8003888 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003856:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ff50 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d136      	bne.n	8003902 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d109      	bne.n	80038b2 <I2S_IRQHandler+0xbc>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d102      	bne.n	80038b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff45 	bl	800373c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d122      	bne.n	8003902 <I2S_IRQHandler+0x10c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d11b      	bne.n	8003902 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	f043 0204 	orr.w	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff13 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4aa2      	ldr	r2, [pc, #648]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003926:	4ba2      	ldr	r3, [pc, #648]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003928:	e001      	b.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800392a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a9b      	ldr	r2, [pc, #620]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d101      	bne.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003944:	4b9a      	ldr	r3, [pc, #616]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003946:	e001      	b.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003958:	d004      	beq.n	8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 8099 	bne.w	8003a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d107      	bne.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f925 	bl	8003bc8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d107      	bne.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9c8 	bl	8003d28 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d13a      	bne.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d035      	beq.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a7e      	ldr	r2, [pc, #504]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039b6:	4b7e      	ldr	r3, [pc, #504]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039b8:	e001      	b.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4979      	ldr	r1, [pc, #484]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039c6:	428b      	cmp	r3, r1
 80039c8:	d101      	bne.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039ca:	4b79      	ldr	r3, [pc, #484]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039cc:	e001      	b.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fe88 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	f040 80be 	bne.w	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80b8 	beq.w	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a59      	ldr	r2, [pc, #356]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a4a:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a4c:	e001      	b.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4954      	ldr	r1, [pc, #336]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a5a:	428b      	cmp	r3, r1
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a5e:	4b54      	ldr	r3, [pc, #336]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a60:	e001      	b.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f043 0204 	orr.w	r2, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fe4a 	bl	8003728 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a94:	e084      	b.n	8003ba0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d107      	bne.n	8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8be 	bl	8003c2c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8fd 	bl	8003cc4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d12f      	bne.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02a      	beq.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2e      	ldr	r2, [pc, #184]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003af8:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003afa:	e001      	b.n	8003b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4929      	ldr	r1, [pc, #164]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d101      	bne.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b0c:	4b28      	ldr	r3, [pc, #160]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b0e:	e001      	b.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f043 0202 	orr.w	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fdfa 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d131      	bne.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02c      	beq.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a17      	ldr	r2, [pc, #92]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b52:	4b17      	ldr	r3, [pc, #92]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b54:	e001      	b.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4912      	ldr	r1, [pc, #72]	; (8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b62:	428b      	cmp	r3, r1
 8003b64:	d101      	bne.n	8003b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b68:	e001      	b.n	8003b6e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b82:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0204 	orr.w	r2, r3, #4
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fdc5 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b9e:	e000      	b.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba0:	bf00      	nop
}
 8003ba2:	bf00      	nop
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	40003800 	.word	0x40003800
 8003bb0:	40003400 	.word	0x40003400

08003bb4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c99      	adds	r1, r3, #2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6251      	str	r1, [r2, #36]	; 0x24
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d113      	bne.n	8003c22 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ffc9 	bl	8003bb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c99      	adds	r1, r3, #2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c3e:	8819      	ldrh	r1, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <I2SEx_TxISR_I2SExt+0x90>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <I2SEx_TxISR_I2SExt+0x22>
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c4c:	e001      	b.n	8003c52 <I2SEx_TxISR_I2SExt+0x26>
 8003c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c52:	460a      	mov	r2, r1
 8003c54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d121      	bne.n	8003cb2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <I2SEx_TxISR_I2SExt+0x90>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <I2SEx_TxISR_I2SExt+0x50>
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c7a:	e001      	b.n	8003c80 <I2SEx_TxISR_I2SExt+0x54>
 8003c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	490d      	ldr	r1, [pc, #52]	; (8003cbc <I2SEx_TxISR_I2SExt+0x90>)
 8003c88:	428b      	cmp	r3, r1
 8003c8a:	d101      	bne.n	8003c90 <I2SEx_TxISR_I2SExt+0x64>
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c8e:	e001      	b.n	8003c94 <I2SEx_TxISR_I2SExt+0x68>
 8003c90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff81 	bl	8003bb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40003800 	.word	0x40003800
 8003cc0:	40003400 	.word	0x40003400

08003cc4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68d8      	ldr	r0, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	1c99      	adds	r1, r3, #2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cdc:	b282      	uxth	r2, r0
 8003cde:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d113      	bne.n	8003d20 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d06:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ff4a 	bl	8003bb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <I2SEx_RxISR_I2SExt+0x16>
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <I2SEx_RxISR_I2SExt+0x94>)
 8003d3c:	e001      	b.n	8003d42 <I2SEx_RxISR_I2SExt+0x1a>
 8003d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d42:	68d8      	ldr	r0, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	1c99      	adds	r1, r3, #2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d4e:	b282      	uxth	r2, r0
 8003d50:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d121      	bne.n	8003dae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <I2SEx_RxISR_I2SExt+0x50>
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <I2SEx_RxISR_I2SExt+0x94>)
 8003d76:	e001      	b.n	8003d7c <I2SEx_RxISR_I2SExt+0x54>
 8003d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	490d      	ldr	r1, [pc, #52]	; (8003db8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d84:	428b      	cmp	r3, r1
 8003d86:	d101      	bne.n	8003d8c <I2SEx_RxISR_I2SExt+0x64>
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <I2SEx_RxISR_I2SExt+0x94>)
 8003d8a:	e001      	b.n	8003d90 <I2SEx_RxISR_I2SExt+0x68>
 8003d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d94:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff03 	bl	8003bb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40003800 	.word	0x40003800
 8003dbc:	40003400 	.word	0x40003400

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e264      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d075      	beq.n	8003eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dde:	4ba3      	ldr	r3, [pc, #652]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dea:	4ba0      	ldr	r3, [pc, #640]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d112      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b9d      	ldr	r3, [pc, #628]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	4b99      	ldr	r3, [pc, #612]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x108>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d157      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e23f      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x74>
 8003e26:	4b91      	ldr	r3, [pc, #580]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a90      	ldr	r2, [pc, #576]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b8b      	ldr	r3, [pc, #556]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a8a      	ldr	r2, [pc, #552]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b88      	ldr	r3, [pc, #544]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a87      	ldr	r2, [pc, #540]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e58:	4b84      	ldr	r3, [pc, #528]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a83      	ldr	r2, [pc, #524]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b81      	ldr	r3, [pc, #516]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a80      	ldr	r2, [pc, #512]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd f93e 	bl	80010f8 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fd f93a 	bl	80010f8 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e204      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b76      	ldr	r3, [pc, #472]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd f92a 	bl	80010f8 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd f926 	bl	80010f8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1f0      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b6c      	ldr	r3, [pc, #432]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xe8>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ed6:	4b65      	ldr	r3, [pc, #404]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b62      	ldr	r3, [pc, #392]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eee:	4b5f      	ldr	r3, [pc, #380]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b5c      	ldr	r3, [pc, #368]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1c4      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b56      	ldr	r3, [pc, #344]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4952      	ldr	r1, [pc, #328]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e03a      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b4f      	ldr	r3, [pc, #316]	; (8004070 <HAL_RCC_OscConfig+0x2b0>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd f8df 	bl	80010f8 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fd f8db 	bl	80010f8 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e1a5      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	4b46      	ldr	r3, [pc, #280]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b43      	ldr	r3, [pc, #268]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4940      	ldr	r1, [pc, #256]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b3f      	ldr	r3, [pc, #252]	; (8004070 <HAL_RCC_OscConfig+0x2b0>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd f8be 	bl	80010f8 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fd f8ba 	bl	80010f8 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e184      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4b36      	ldr	r3, [pc, #216]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d030      	beq.n	800400c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4b30      	ldr	r3, [pc, #192]	; (8004074 <HAL_RCC_OscConfig+0x2b4>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fd f89e 	bl	80010f8 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fd f89a 	bl	80010f8 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e164      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	4b26      	ldr	r3, [pc, #152]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x200>
 8003fde:	e015      	b.n	800400c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_RCC_OscConfig+0x2b4>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fd f887 	bl	80010f8 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fd f883 	bl	80010f8 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e14d      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1f0      	bne.n	8003fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a0 	beq.w	800415a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	4b0f      	ldr	r3, [pc, #60]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a0e      	ldr	r2, [pc, #56]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <HAL_RCC_OscConfig+0x2ac>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <HAL_RCC_OscConfig+0x2b8>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d121      	bne.n	800409a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b08      	ldr	r3, [pc, #32]	; (8004078 <HAL_RCC_OscConfig+0x2b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a07      	ldr	r2, [pc, #28]	; (8004078 <HAL_RCC_OscConfig+0x2b8>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fd f849 	bl	80010f8 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e011      	b.n	800408e <HAL_RCC_OscConfig+0x2ce>
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	42470000 	.word	0x42470000
 8004074:	42470e80 	.word	0x42470e80
 8004078:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407c:	f7fd f83c 	bl	80010f8 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e106      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800408e:	4b85      	ldr	r3, [pc, #532]	; (80042a4 <HAL_RCC_OscConfig+0x4e4>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d106      	bne.n	80040b0 <HAL_RCC_OscConfig+0x2f0>
 80040a2:	4b81      	ldr	r3, [pc, #516]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a6:	4a80      	ldr	r2, [pc, #512]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6713      	str	r3, [r2, #112]	; 0x70
 80040ae:	e01c      	b.n	80040ea <HAL_RCC_OscConfig+0x32a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d10c      	bne.n	80040d2 <HAL_RCC_OscConfig+0x312>
 80040b8:	4b7b      	ldr	r3, [pc, #492]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040bc:	4a7a      	ldr	r2, [pc, #488]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040be:	f043 0304 	orr.w	r3, r3, #4
 80040c2:	6713      	str	r3, [r2, #112]	; 0x70
 80040c4:	4b78      	ldr	r3, [pc, #480]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c8:	4a77      	ldr	r2, [pc, #476]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6713      	str	r3, [r2, #112]	; 0x70
 80040d0:	e00b      	b.n	80040ea <HAL_RCC_OscConfig+0x32a>
 80040d2:	4b75      	ldr	r3, [pc, #468]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d6:	4a74      	ldr	r2, [pc, #464]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040d8:	f023 0301 	bic.w	r3, r3, #1
 80040dc:	6713      	str	r3, [r2, #112]	; 0x70
 80040de:	4b72      	ldr	r3, [pc, #456]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e2:	4a71      	ldr	r2, [pc, #452]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d015      	beq.n	800411e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fd f801 	bl	80010f8 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f8:	e00a      	b.n	8004110 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040fa:	f7fc fffd 	bl	80010f8 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f241 3288 	movw	r2, #5000	; 0x1388
 8004108:	4293      	cmp	r3, r2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0c5      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004110:	4b65      	ldr	r3, [pc, #404]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0ee      	beq.n	80040fa <HAL_RCC_OscConfig+0x33a>
 800411c:	e014      	b.n	8004148 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800411e:	f7fc ffeb 	bl	80010f8 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004124:	e00a      	b.n	800413c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004126:	f7fc ffe7 	bl	80010f8 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f241 3288 	movw	r2, #5000	; 0x1388
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e0af      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800413c:	4b5a      	ldr	r3, [pc, #360]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 800413e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1ee      	bne.n	8004126 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d105      	bne.n	800415a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800414e:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	4a55      	ldr	r2, [pc, #340]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004158:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f000 809b 	beq.w	800429a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004164:	4b50      	ldr	r3, [pc, #320]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 030c 	and.w	r3, r3, #12
 800416c:	2b08      	cmp	r3, #8
 800416e:	d05c      	beq.n	800422a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b02      	cmp	r3, #2
 8004176:	d141      	bne.n	80041fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004178:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417e:	f7fc ffbb 	bl	80010f8 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004186:	f7fc ffb7 	bl	80010f8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e081      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004198:	4b43      	ldr	r3, [pc, #268]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f0      	bne.n	8004186 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	019b      	lsls	r3, r3, #6
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	085b      	lsrs	r3, r3, #1
 80041bc:	3b01      	subs	r3, #1
 80041be:	041b      	lsls	r3, r3, #16
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c6:	061b      	lsls	r3, r3, #24
 80041c8:	4937      	ldr	r1, [pc, #220]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ce:	4b37      	ldr	r3, [pc, #220]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fc ff90 	bl	80010f8 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fc ff8c 	bl	80010f8 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e056      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ee:	4b2e      	ldr	r3, [pc, #184]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x41c>
 80041fa:	e04e      	b.n	800429a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004202:	f7fc ff79 	bl	80010f8 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800420a:	f7fc ff75 	bl	80010f8 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e03f      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421c:	4b22      	ldr	r3, [pc, #136]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1f0      	bne.n	800420a <HAL_RCC_OscConfig+0x44a>
 8004228:	e037      	b.n	800429a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e032      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004236:	4b1c      	ldr	r3, [pc, #112]	; (80042a8 <HAL_RCC_OscConfig+0x4e8>)
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d028      	beq.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d121      	bne.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425c:	429a      	cmp	r2, r3
 800425e:	d11a      	bne.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004266:	4013      	ands	r3, r2
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800426e:	4293      	cmp	r3, r2
 8004270:	d111      	bne.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	085b      	lsrs	r3, r3, #1
 800427e:	3b01      	subs	r3, #1
 8004280:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004282:	429a      	cmp	r2, r3
 8004284:	d107      	bne.n	8004296 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004290:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d001      	beq.n	800429a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	40007000 	.word	0x40007000
 80042a8:	40023800 	.word	0x40023800
 80042ac:	42470060 	.word	0x42470060

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fc feaa 	bl	80010f8 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fc fea6 	bl	80010f8 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc fe0a 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	08007fa8 	.word	0x08007fa8
 8004474:	20000000 	.word	0x20000000
 8004478:	20000004 	.word	0x20000004

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	2300      	movs	r3, #0
 800448e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	4b67      	ldr	r3, [pc, #412]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x40>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	f200 80bd 	bhi.w	8004620 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ae:	e0b7      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b61      	ldr	r3, [pc, #388]	; (8004638 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044b2:	60bb      	str	r3, [r7, #8]
       break;
 80044b4:	e0b7      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b6:	4b61      	ldr	r3, [pc, #388]	; (800463c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80044b8:	60bb      	str	r3, [r7, #8]
      break;
 80044ba:	e0b4      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044bc:	4b5d      	ldr	r3, [pc, #372]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c6:	4b5b      	ldr	r3, [pc, #364]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d04d      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b58      	ldr	r3, [pc, #352]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	461a      	mov	r2, r3
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044e2:	f04f 0100 	mov.w	r1, #0
 80044e6:	ea02 0800 	and.w	r8, r2, r0
 80044ea:	ea03 0901 	and.w	r9, r3, r1
 80044ee:	4640      	mov	r0, r8
 80044f0:	4649      	mov	r1, r9
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	014b      	lsls	r3, r1, #5
 80044fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004500:	0142      	lsls	r2, r0, #5
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	ebb0 0008 	subs.w	r0, r0, r8
 800450a:	eb61 0109 	sbc.w	r1, r1, r9
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	018b      	lsls	r3, r1, #6
 8004518:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800451c:	0182      	lsls	r2, r0, #6
 800451e:	1a12      	subs	r2, r2, r0
 8004520:	eb63 0301 	sbc.w	r3, r3, r1
 8004524:	f04f 0000 	mov.w	r0, #0
 8004528:	f04f 0100 	mov.w	r1, #0
 800452c:	00d9      	lsls	r1, r3, #3
 800452e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004532:	00d0      	lsls	r0, r2, #3
 8004534:	4602      	mov	r2, r0
 8004536:	460b      	mov	r3, r1
 8004538:	eb12 0208 	adds.w	r2, r2, r8
 800453c:	eb43 0309 	adc.w	r3, r3, r9
 8004540:	f04f 0000 	mov.w	r0, #0
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	0259      	lsls	r1, r3, #9
 800454a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800454e:	0250      	lsls	r0, r2, #9
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	461a      	mov	r2, r3
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	f7fb fe32 	bl	80001c8 <__aeabi_uldivmod>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4613      	mov	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e04a      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800456e:	4b31      	ldr	r3, [pc, #196]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	099b      	lsrs	r3, r3, #6
 8004574:	461a      	mov	r2, r3
 8004576:	f04f 0300 	mov.w	r3, #0
 800457a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800457e:	f04f 0100 	mov.w	r1, #0
 8004582:	ea02 0400 	and.w	r4, r2, r0
 8004586:	ea03 0501 	and.w	r5, r3, r1
 800458a:	4620      	mov	r0, r4
 800458c:	4629      	mov	r1, r5
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	014b      	lsls	r3, r1, #5
 8004598:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800459c:	0142      	lsls	r2, r0, #5
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	1b00      	subs	r0, r0, r4
 80045a4:	eb61 0105 	sbc.w	r1, r1, r5
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	018b      	lsls	r3, r1, #6
 80045b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045b6:	0182      	lsls	r2, r0, #6
 80045b8:	1a12      	subs	r2, r2, r0
 80045ba:	eb63 0301 	sbc.w	r3, r3, r1
 80045be:	f04f 0000 	mov.w	r0, #0
 80045c2:	f04f 0100 	mov.w	r1, #0
 80045c6:	00d9      	lsls	r1, r3, #3
 80045c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045cc:	00d0      	lsls	r0, r2, #3
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	1912      	adds	r2, r2, r4
 80045d4:	eb45 0303 	adc.w	r3, r5, r3
 80045d8:	f04f 0000 	mov.w	r0, #0
 80045dc:	f04f 0100 	mov.w	r1, #0
 80045e0:	0299      	lsls	r1, r3, #10
 80045e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80045e6:	0290      	lsls	r0, r2, #10
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	461a      	mov	r2, r3
 80045f4:	f04f 0300 	mov.w	r3, #0
 80045f8:	f7fb fde6 	bl	80001c8 <__aeabi_uldivmod>
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	4613      	mov	r3, r2
 8004602:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004604:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	3301      	adds	r3, #1
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	fbb2 f3f3 	udiv	r3, r2, r3
 800461c:	60bb      	str	r3, [r7, #8]
      break;
 800461e:	e002      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004622:	60bb      	str	r3, [r7, #8]
      break;
 8004624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004626:	68bb      	ldr	r3, [r7, #8]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004632:	bf00      	nop
 8004634:	40023800 	.word	0x40023800
 8004638:	00f42400 	.word	0x00f42400
 800463c:	007a1200 	.word	0x007a1200

08004640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_RCC_GetHCLKFreq+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000000 	.word	0x20000000

08004658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800465c:	f7ff fff0 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	0a9b      	lsrs	r3, r3, #10
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4903      	ldr	r1, [pc, #12]	; (800467c <HAL_RCC_GetPCLK1Freq+0x24>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	bd80      	pop	{r7, pc}
 8004678:	40023800 	.word	0x40023800
 800467c:	08007fb8 	.word	0x08007fb8

08004680 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d105      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d035      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046a8:	4b62      	ldr	r3, [pc, #392]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046ae:	f7fc fd23 	bl	80010f8 <HAL_GetTick>
 80046b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046b6:	f7fc fd1f 	bl	80010f8 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0b0      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046c8:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1f0      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	019a      	lsls	r2, r3, #6
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	071b      	lsls	r3, r3, #28
 80046e0:	4955      	ldr	r1, [pc, #340]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046e8:	4b52      	ldr	r3, [pc, #328]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046ee:	f7fc fd03 	bl	80010f8 <HAL_GetTick>
 80046f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046f4:	e008      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046f6:	f7fc fcff 	bl	80010f8 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b02      	cmp	r3, #2
 8004702:	d901      	bls.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e090      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004708:	4b4b      	ldr	r3, [pc, #300]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8083 	beq.w	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	4b44      	ldr	r3, [pc, #272]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	4a43      	ldr	r2, [pc, #268]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004730:	6413      	str	r3, [r2, #64]	; 0x40
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800473e:	4b3f      	ldr	r3, [pc, #252]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a3e      	ldr	r2, [pc, #248]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004748:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800474a:	f7fc fcd5 	bl	80010f8 <HAL_GetTick>
 800474e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004752:	f7fc fcd1 	bl	80010f8 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e062      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d0f0      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004770:	4b31      	ldr	r3, [pc, #196]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004778:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02f      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	429a      	cmp	r2, r3
 800478c:	d028      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800478e:	4b2a      	ldr	r3, [pc, #168]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004796:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004798:	4b29      	ldr	r3, [pc, #164]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800479a:	2201      	movs	r2, #1
 800479c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800479e:	4b28      	ldr	r3, [pc, #160]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047a4:	4a24      	ldr	r2, [pc, #144]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047aa:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d114      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047b6:	f7fc fc9f 	bl	80010f8 <HAL_GetTick>
 80047ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047bc:	e00a      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047be:	f7fc fc9b 	bl	80010f8 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e02a      	b.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047d4:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ee      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ec:	d10d      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80047fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004802:	490d      	ldr	r1, [pc, #52]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004804:	4313      	orrs	r3, r2
 8004806:	608b      	str	r3, [r1, #8]
 8004808:	e005      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	4a0a      	ldr	r2, [pc, #40]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004810:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004814:	6093      	str	r3, [r2, #8]
 8004816:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004822:	4905      	ldr	r1, [pc, #20]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004824:	4313      	orrs	r3, r2
 8004826:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3718      	adds	r7, #24
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	42470068 	.word	0x42470068
 8004838:	40023800 	.word	0x40023800
 800483c:	40007000 	.word	0x40007000
 8004840:	42470e40 	.word	0x42470e40

08004844 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004858:	2300      	movs	r3, #0
 800485a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d13e      	bne.n	80048e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d12f      	bne.n	80048d8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004878:	4b1e      	ldr	r3, [pc, #120]	; (80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800487a:	617b      	str	r3, [r7, #20]
          break;
 800487c:	e02f      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800487e:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800488a:	d108      	bne.n	800489e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800488c:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004894:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	e007      	b.n	80048ae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048a6:	4a15      	ldr	r2, [pc, #84]	; (80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b4:	099b      	lsrs	r3, r3, #6
 80048b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c8:	0f1b      	lsrs	r3, r3, #28
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
          break;
 80048d6:	e002      	b.n	80048de <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]
          break;
 80048dc:	bf00      	nop
        }
      }
      break;
 80048de:	bf00      	nop
    }
  }
  return frequency;
 80048e0:	697b      	ldr	r3, [r7, #20]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00bb8000 	.word	0x00bb8000
 80048f8:	007a1200 	.word	0x007a1200
 80048fc:	00f42400 	.word	0x00f42400

08004900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07b      	b.n	8004a0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d108      	bne.n	800492c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004922:	d009      	beq.n	8004938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	61da      	str	r2, [r3, #28]
 800492a:	e005      	b.n	8004938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fc fa54 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049bc:	ea42 0103 	orr.w	r1, r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	f003 0104 	and.w	r1, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0210 	and.w	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a12:	b084      	sub	sp, #16
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	f107 001c 	add.w	r0, r7, #28
 8004a20:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d122      	bne.n	8004a70 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d105      	bne.n	8004a64 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f99f 	bl	8004da8 <USB_CoreReset>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	73fb      	strb	r3, [r7, #15]
 8004a6e:	e01a      	b.n	8004aa6 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 f993 	bl	8004da8 <USB_CoreReset>
 8004a82:	4603      	mov	r3, r0
 8004a84:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
 8004a98:	e005      	b.n	8004aa6 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d10b      	bne.n	8004ac4 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	f043 0206 	orr.w	r2, r3, #6
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ad0:	b004      	add	sp, #16
 8004ad2:	4770      	bx	lr

08004ad4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f043 0201 	orr.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f023 0201 	bic.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b34:	78fb      	ldrb	r3, [r7, #3]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d115      	bne.n	8004b66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b46:	2001      	movs	r0, #1
 8004b48:	f7fc fae2 	bl	8001110 <HAL_Delay>
      ms++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f919 	bl	8004d8a <USB_GetMode>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d01e      	beq.n	8004b9c <USB_SetCurrentMode+0x84>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b31      	cmp	r3, #49	; 0x31
 8004b62:	d9f0      	bls.n	8004b46 <USB_SetCurrentMode+0x2e>
 8004b64:	e01a      	b.n	8004b9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d115      	bne.n	8004b98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b78:	2001      	movs	r0, #1
 8004b7a:	f7fc fac9 	bl	8001110 <HAL_Delay>
      ms++;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3301      	adds	r3, #1
 8004b82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f900 	bl	8004d8a <USB_GetMode>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <USB_SetCurrentMode+0x84>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2b31      	cmp	r3, #49	; 0x31
 8004b94:	d9f0      	bls.n	8004b78 <USB_SetCurrentMode+0x60>
 8004b96:	e001      	b.n	8004b9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e005      	b.n	8004ba8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b32      	cmp	r3, #50	; 0x32
 8004ba0:	d101      	bne.n	8004ba6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	019b      	lsls	r3, r3, #6
 8004bc2:	f043 0220 	orr.w	r2, r3, #32
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	60fb      	str	r3, [r7, #12]
 8004bd0:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <USB_FlushTxFifo+0x44>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d901      	bls.n	8004bda <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e006      	b.n	8004be8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d0f1      	beq.n	8004bca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	00030d40 	.word	0x00030d40

08004bf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2210      	movs	r2, #16
 8004c08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	4a08      	ldr	r2, [pc, #32]	; (8004c34 <USB_FlushRxFifo+0x3c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e006      	b.n	8004c28 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d0f1      	beq.n	8004c0a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c26:	2300      	movs	r3, #0
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	00030d40 	.word	0x00030d40

08004c38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	4611      	mov	r1, r2
 8004c44:	461a      	mov	r2, r3
 8004c46:	460b      	mov	r3, r1
 8004c48:	71fb      	strb	r3, [r7, #7]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c56:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d123      	bne.n	8004ca6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c5e:	88bb      	ldrh	r3, [r7, #4]
 8004c60:	3303      	adds	r3, #3
 8004c62:	089b      	lsrs	r3, r3, #2
 8004c64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	61bb      	str	r3, [r7, #24]
 8004c6a:	e018      	b.n	8004c9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c6c:	79fb      	ldrb	r3, [r7, #7]
 8004c6e:	031a      	lsls	r2, r3, #12
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c78:	461a      	mov	r2, r3
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	3301      	adds	r3, #1
 8004c84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	3301      	adds	r3, #1
 8004c90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	3301      	adds	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	61bb      	str	r3, [r7, #24]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d3e2      	bcc.n	8004c6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3724      	adds	r7, #36	; 0x24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b08b      	sub	sp, #44	; 0x2c
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cca:	88fb      	ldrh	r3, [r7, #6]
 8004ccc:	089b      	lsrs	r3, r3, #2
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004cd2:	88fb      	ldrh	r3, [r7, #6]
 8004cd4:	f003 0303 	and.w	r3, r3, #3
 8004cd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cda:	2300      	movs	r3, #0
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	e014      	b.n	8004d0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cea:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	3301      	adds	r3, #1
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	3301      	adds	r3, #1
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d04:	6a3b      	ldr	r3, [r7, #32]
 8004d06:	3301      	adds	r3, #1
 8004d08:	623b      	str	r3, [r7, #32]
 8004d0a:	6a3a      	ldr	r2, [r7, #32]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d3e6      	bcc.n	8004ce0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d12:	8bfb      	ldrh	r3, [r7, #30]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01e      	beq.n	8004d56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d22:	461a      	mov	r2, r3
 8004d24:	f107 0310 	add.w	r3, r7, #16
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	6a3b      	ldr	r3, [r7, #32]
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	00db      	lsls	r3, r3, #3
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	701a      	strb	r2, [r3, #0]
      i++;
 8004d3e:	6a3b      	ldr	r3, [r7, #32]
 8004d40:	3301      	adds	r3, #1
 8004d42:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	3301      	adds	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004d4a:	8bfb      	ldrh	r3, [r7, #30]
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d50:	8bfb      	ldrh	r3, [r7, #30]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1ea      	bne.n	8004d2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	372c      	adds	r7, #44	; 0x2c
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr

08004d8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0301 	and.w	r3, r3, #1
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	370c      	adds	r7, #12
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <USB_CoreReset+0x60>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d901      	bls.n	8004dc4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e01a      	b.n	8004dfa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	daf3      	bge.n	8004db4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f043 0201 	orr.w	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	4a09      	ldr	r2, [pc, #36]	; (8004e08 <USB_CoreReset+0x60>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d901      	bls.n	8004dec <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e006      	b.n	8004dfa <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d0f1      	beq.n	8004ddc <USB_CoreReset+0x34>

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	00030d40 	.word	0x00030d40

08004e0c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	f107 001c 	add.w	r0, r7, #28
 8004e1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d018      	beq.n	8004e90 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d10a      	bne.n	8004e7a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e72:	f043 0304 	orr.w	r3, r3, #4
 8004e76:	6013      	str	r3, [r2, #0]
 8004e78:	e014      	b.n	8004ea4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e88:	f023 0304 	bic.w	r3, r3, #4
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e009      	b.n	8004ea4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e9e:	f023 0304 	bic.w	r3, r3, #4
 8004ea2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004ea4:	2110      	movs	r1, #16
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fe82 	bl	8004bb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fea3 	bl	8004bf8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e015      	b.n	8004ee4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eca:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed8:	461a      	mov	r2, r3
 8004eda:	2300      	movs	r3, #0
 8004edc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d3e5      	bcc.n	8004eb8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00b      	beq.n	8004f1e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <USB_HostInit+0x154>)
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a13      	ldr	r2, [pc, #76]	; (8004f64 <USB_HostInit+0x158>)
 8004f18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004f1c:	e009      	b.n	8004f32 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2280      	movs	r2, #128	; 0x80
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <USB_HostInit+0x15c>)
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a0f      	ldr	r2, [pc, #60]	; (8004f6c <USB_HostInit+0x160>)
 8004f2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d105      	bne.n	8004f44 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f043 0210 	orr.w	r2, r3, #16
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	4b09      	ldr	r3, [pc, #36]	; (8004f70 <USB_HostInit+0x164>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f5c:	b004      	add	sp, #16
 8004f5e:	4770      	bx	lr
 8004f60:	01000200 	.word	0x01000200
 8004f64:	00e00300 	.word	0x00e00300
 8004f68:	00600080 	.word	0x00600080
 8004f6c:	004000e0 	.word	0x004000e0
 8004f70:	a3200008 	.word	0xa3200008

08004f74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004fac:	4313      	orrs	r3, r2
 8004fae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004fb0:	78fb      	ldrb	r3, [r7, #3]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d107      	bne.n	8004fc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004fc2:	6053      	str	r3, [r2, #4]
 8004fc4:	e009      	b.n	8004fda <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d106      	bne.n	8004fda <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004fd8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005008:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005016:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005018:	2064      	movs	r0, #100	; 0x64
 800501a:	f7fc f879 	bl	8001110 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800502a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800502c:	200a      	movs	r0, #10
 800502e:	f7fc f86f 	bl	8001110 <HAL_Delay>

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005060:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d109      	bne.n	8005080 <USB_DriveVbus+0x44>
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d106      	bne.n	8005080 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800507a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800507e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508a:	d109      	bne.n	80050a0 <USB_DriveVbus+0x64>
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800509a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800509e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b085      	sub	sp, #20
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	0c5b      	lsrs	r3, r3, #17
 80050cc:	f003 0303 	and.w	r3, r3, #3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	b29b      	uxth	r3, r3
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
	...

08005100 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	4608      	mov	r0, r1
 800510a:	4611      	mov	r1, r2
 800510c:	461a      	mov	r2, r3
 800510e:	4603      	mov	r3, r0
 8005110:	70fb      	strb	r3, [r7, #3]
 8005112:	460b      	mov	r3, r1
 8005114:	70bb      	strb	r3, [r7, #2]
 8005116:	4613      	mov	r3, r2
 8005118:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005122:	78fb      	ldrb	r3, [r7, #3]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512e:	461a      	mov	r2, r3
 8005130:	f04f 33ff 	mov.w	r3, #4294967295
 8005134:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005136:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800513a:	2b03      	cmp	r3, #3
 800513c:	d87e      	bhi.n	800523c <USB_HC_Init+0x13c>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <USB_HC_Init+0x44>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005155 	.word	0x08005155
 8005148:	080051ff 	.word	0x080051ff
 800514c:	08005155 	.word	0x08005155
 8005150:	080051c1 	.word	0x080051c1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005154:	78fb      	ldrb	r3, [r7, #3]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	4413      	add	r3, r2
 800515c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005160:	461a      	mov	r2, r3
 8005162:	f240 439d 	movw	r3, #1181	; 0x49d
 8005166:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800516c:	2b00      	cmp	r3, #0
 800516e:	da10      	bge.n	8005192 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005170:	78fb      	ldrb	r3, [r7, #3]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	4413      	add	r3, r2
 8005178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	78fa      	ldrb	r2, [r7, #3]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	440a      	add	r2, r1
 8005186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800518a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800518e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005190:	e057      	b.n	8005242 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d051      	beq.n	8005242 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800519e:	78fb      	ldrb	r3, [r7, #3]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80051bc:	60d3      	str	r3, [r2, #12]
      break;
 80051be:	e040      	b.n	8005242 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	461a      	mov	r2, r3
 80051ce:	f240 639d 	movw	r3, #1693	; 0x69d
 80051d2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	da34      	bge.n	8005246 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	0151      	lsls	r1, r2, #5
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	440a      	add	r2, r1
 80051f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051fa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80051fc:	e023      	b.n	8005246 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	4413      	add	r3, r2
 8005206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520a:	461a      	mov	r2, r3
 800520c:	f240 2325 	movw	r3, #549	; 0x225
 8005210:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005212:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005216:	2b00      	cmp	r3, #0
 8005218:	da17      	bge.n	800524a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800521a:	78fb      	ldrb	r3, [r7, #3]
 800521c:	015a      	lsls	r2, r3, #5
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	78fa      	ldrb	r2, [r7, #3]
 800522a:	0151      	lsls	r1, r2, #5
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	440a      	add	r2, r1
 8005230:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005234:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005238:	60d3      	str	r3, [r2, #12]
      }
      break;
 800523a:	e006      	b.n	800524a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	77fb      	strb	r3, [r7, #31]
      break;
 8005240:	e004      	b.n	800524c <USB_HC_Init+0x14c>
      break;
 8005242:	bf00      	nop
 8005244:	e002      	b.n	800524c <USB_HC_Init+0x14c>
      break;
 8005246:	bf00      	nop
 8005248:	e000      	b.n	800524c <USB_HC_Init+0x14c>
      break;
 800524a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	78fb      	ldrb	r3, [r7, #3]
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	2101      	movs	r1, #1
 800525c:	fa01 f303 	lsl.w	r3, r1, r3
 8005260:	6939      	ldr	r1, [r7, #16]
 8005262:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005266:	4313      	orrs	r3, r2
 8005268:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005276:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800527a:	2b00      	cmp	r3, #0
 800527c:	da03      	bge.n	8005286 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800527e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	e001      	b.n	800528a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005286:	2300      	movs	r3, #0
 8005288:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ff0f 	bl	80050ae <USB_GetHostSpeed>
 8005290:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005292:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005296:	2b02      	cmp	r3, #2
 8005298:	d106      	bne.n	80052a8 <USB_HC_Init+0x1a8>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d003      	beq.n	80052a8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80052a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80052a4:	617b      	str	r3, [r7, #20]
 80052a6:	e001      	b.n	80052ac <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052ac:	787b      	ldrb	r3, [r7, #1]
 80052ae:	059b      	lsls	r3, r3, #22
 80052b0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052b4:	78bb      	ldrb	r3, [r7, #2]
 80052b6:	02db      	lsls	r3, r3, #11
 80052b8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052bc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80052be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052c2:	049b      	lsls	r3, r3, #18
 80052c4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80052c8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80052cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80052d0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	0159      	lsls	r1, r3, #5
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	440b      	add	r3, r1
 80052de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80052e8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80052ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80052ee:	2b03      	cmp	r3, #3
 80052f0:	d10f      	bne.n	8005312 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	440a      	add	r2, r1
 8005308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005310:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005312:	7ffb      	ldrb	r3, [r7, #31]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3720      	adds	r7, #32
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08c      	sub	sp, #48	; 0x30
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	785b      	ldrb	r3, [r3, #1]
 8005332:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005338:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d02d      	beq.n	80053a2 <USB_HC_StartXfer+0x86>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	791b      	ldrb	r3, [r3, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d129      	bne.n	80053a2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800534e:	79fb      	ldrb	r3, [r7, #7]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d117      	bne.n	8005384 <USB_HC_StartXfer+0x68>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	79db      	ldrb	r3, [r3, #7]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <USB_HC_StartXfer+0x48>
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	79db      	ldrb	r3, [r3, #7]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d10f      	bne.n	8005384 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	015a      	lsls	r2, r3, #5
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	4413      	add	r3, r2
 800536c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	0151      	lsls	r1, r2, #5
 8005376:	6a3a      	ldr	r2, [r7, #32]
 8005378:	440a      	add	r2, r1
 800537a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005384:	79fb      	ldrb	r3, [r7, #7]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10b      	bne.n	80053a2 <USB_HC_StartXfer+0x86>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	795b      	ldrb	r3, [r3, #5]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d107      	bne.n	80053a2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	785b      	ldrb	r3, [r3, #1]
 8005396:	4619      	mov	r1, r3
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fa2f 	bl	80057fc <USB_DoPing>
      return HAL_OK;
 800539e:	2300      	movs	r3, #0
 80053a0:	e0f8      	b.n	8005594 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d018      	beq.n	80053dc <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	8912      	ldrh	r2, [r2, #8]
 80053b2:	4413      	add	r3, r2
 80053b4:	3b01      	subs	r3, #1
 80053b6:	68ba      	ldr	r2, [r7, #8]
 80053b8:	8912      	ldrh	r2, [r2, #8]
 80053ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80053be:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80053c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80053c2:	8b7b      	ldrh	r3, [r7, #26]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d90b      	bls.n	80053e0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80053c8:	8b7b      	ldrh	r3, [r7, #26]
 80053ca:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80053cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	8912      	ldrh	r2, [r2, #8]
 80053d2:	fb02 f203 	mul.w	r2, r2, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	611a      	str	r2, [r3, #16]
 80053da:	e001      	b.n	80053e0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80053dc:	2301      	movs	r3, #1
 80053de:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	78db      	ldrb	r3, [r3, #3]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d007      	beq.n	80053f8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80053e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	8912      	ldrh	r2, [r2, #8]
 80053ee:	fb02 f203 	mul.w	r2, r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	611a      	str	r2, [r3, #16]
 80053f6:	e003      	b.n	8005400 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005408:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800540a:	04d9      	lsls	r1, r3, #19
 800540c:	4b63      	ldr	r3, [pc, #396]	; (800559c <USB_HC_StartXfer+0x280>)
 800540e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005410:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	7a9b      	ldrb	r3, [r3, #10]
 8005416:	075b      	lsls	r3, r3, #29
 8005418:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800541c:	69f9      	ldr	r1, [r7, #28]
 800541e:	0148      	lsls	r0, r1, #5
 8005420:	6a39      	ldr	r1, [r7, #32]
 8005422:	4401      	add	r1, r0
 8005424:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005428:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800542a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	68d9      	ldr	r1, [r3, #12]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	4413      	add	r3, r2
 800543e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005442:	460a      	mov	r2, r1
 8005444:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	bf0c      	ite	eq
 8005456:	2301      	moveq	r3, #1
 8005458:	2300      	movne	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	4413      	add	r3, r2
 8005466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69fa      	ldr	r2, [r7, #28]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	440a      	add	r2, r1
 8005474:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005478:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800547c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	7e7b      	ldrb	r3, [r7, #25]
 800548e:	075b      	lsls	r3, r3, #29
 8005490:	69f9      	ldr	r1, [r7, #28]
 8005492:	0148      	lsls	r0, r1, #5
 8005494:	6a39      	ldr	r1, [r7, #32]
 8005496:	4401      	add	r1, r0
 8005498:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800549c:	4313      	orrs	r3, r2
 800549e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054b6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	78db      	ldrb	r3, [r3, #3]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	e003      	b.n	80054d2 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054d0:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054d8:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	6a3b      	ldr	r3, [r7, #32]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e6:	461a      	mov	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80054ec:	79fb      	ldrb	r3, [r7, #7]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	e04e      	b.n	8005594 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	78db      	ldrb	r3, [r3, #3]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d149      	bne.n	8005592 <USB_HC_StartXfer+0x276>
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d045      	beq.n	8005592 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	79db      	ldrb	r3, [r3, #7]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d830      	bhi.n	8005570 <USB_HC_StartXfer+0x254>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <USB_HC_StartXfer+0x1f8>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005525 	.word	0x08005525
 8005518:	08005549 	.word	0x08005549
 800551c:	08005525 	.word	0x08005525
 8005520:	08005549 	.word	0x08005549
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	3303      	adds	r3, #3
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800552e:	8afa      	ldrh	r2, [r7, #22]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	b29b      	uxth	r3, r3
 8005536:	429a      	cmp	r2, r3
 8005538:	d91c      	bls.n	8005574 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	f043 0220 	orr.w	r2, r3, #32
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	619a      	str	r2, [r3, #24]
        }
        break;
 8005546:	e015      	b.n	8005574 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	695b      	ldr	r3, [r3, #20]
 800554c:	3303      	adds	r3, #3
 800554e:	089b      	lsrs	r3, r3, #2
 8005550:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005552:	8afa      	ldrh	r2, [r7, #22]
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	b29b      	uxth	r3, r3
 800555e:	429a      	cmp	r2, r3
 8005560:	d90a      	bls.n	8005578 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	619a      	str	r2, [r3, #24]
        }
        break;
 800556e:	e003      	b.n	8005578 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005570:	bf00      	nop
 8005572:	e002      	b.n	800557a <USB_HC_StartXfer+0x25e>
        break;
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <USB_HC_StartXfer+0x25e>
        break;
 8005578:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	68d9      	ldr	r1, [r3, #12]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	785a      	ldrb	r2, [r3, #1]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	b29b      	uxth	r3, r3
 8005588:	2000      	movs	r0, #0
 800558a:	9000      	str	r0, [sp, #0]
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff fb53 	bl	8004c38 <USB_WritePacket>
  }

  return HAL_OK;
 8005592:	2300      	movs	r3, #0
}
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	1ff80000 	.word	0x1ff80000

080055a0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	b29b      	uxth	r3, r3
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b089      	sub	sp, #36	; 0x24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	460b      	mov	r3, r1
 80055cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	0c9b      	lsrs	r3, r3, #18
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	015a      	lsls	r2, r3, #5
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	4413      	add	r3, r2
 80055f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	0fdb      	lsrs	r3, r3, #31
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b20      	cmp	r3, #32
 8005610:	d104      	bne.n	800561c <USB_HC_Halt+0x5a>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e0e8      	b.n	80057ee <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <USB_HC_Halt+0x66>
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	2b02      	cmp	r3, #2
 8005626:	d173      	bne.n	8005710 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	4413      	add	r3, r2
 8005630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	0151      	lsls	r1, r2, #5
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	440a      	add	r2, r1
 800563e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005642:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005646:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0320 	and.w	r3, r3, #32
 8005650:	2b00      	cmp	r3, #0
 8005652:	f040 80cb 	bne.w	80057ec <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d143      	bne.n	80056ea <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	4413      	add	r3, r2
 800566a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	440a      	add	r2, r1
 8005678:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800567c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005680:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	4413      	add	r3, r2
 800568a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69ba      	ldr	r2, [r7, #24]
 8005696:	440a      	add	r2, r1
 8005698:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800569c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056c0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	3301      	adds	r3, #1
 80056c6:	61fb      	str	r3, [r7, #28]
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ce:	d81d      	bhi.n	800570c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e6:	d0ec      	beq.n	80056c2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056e8:	e080      	b.n	80057ec <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	015a      	lsls	r2, r3, #5
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	4413      	add	r3, r2
 80056f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	0151      	lsls	r1, r2, #5
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	440a      	add	r2, r1
 8005700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005708:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800570a:	e06f      	b.n	80057ec <USB_HC_Halt+0x22a>
            break;
 800570c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800570e:	e06d      	b.n	80057ec <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	440a      	add	r2, r1
 8005726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800572a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800572e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d143      	bne.n	80057c8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	0151      	lsls	r1, r2, #5
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	440a      	add	r2, r1
 8005756:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800575e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	4413      	add	r3, r2
 8005768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	69ba      	ldr	r2, [r7, #24]
 8005774:	440a      	add	r2, r1
 8005776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800577a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800577e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	4413      	add	r3, r2
 8005788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	440a      	add	r2, r1
 8005796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800579e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	3301      	adds	r3, #1
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ac:	d81d      	bhi.n	80057ea <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c4:	d0ec      	beq.n	80057a0 <USB_HC_Halt+0x1de>
 80057c6:	e011      	b.n	80057ec <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057e6:	6013      	str	r3, [r2, #0]
 80057e8:	e000      	b.n	80057ec <USB_HC_Halt+0x22a>
          break;
 80057ea:	bf00      	nop
    }
  }

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3724      	adds	r7, #36	; 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
	...

080057fc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800580c:	78fb      	ldrb	r3, [r7, #3]
 800580e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005810:	2301      	movs	r3, #1
 8005812:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	04da      	lsls	r2, r3, #19
 8005818:	4b15      	ldr	r3, [pc, #84]	; (8005870 <USB_DoPing+0x74>)
 800581a:	4013      	ands	r3, r2
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	0151      	lsls	r1, r2, #5
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	440a      	add	r2, r1
 8005824:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005828:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800582c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4413      	add	r3, r2
 8005836:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005844:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800584c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	1ff80000 	.word	0x1ff80000

08005874 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f7ff f936 	bl	8004af6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800588a:	2110      	movs	r1, #16
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff f98f 	bl	8004bb0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff f9b0 	bl	8004bf8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]
 800589c:	e01f      	b.n	80058de <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058bc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058c4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3301      	adds	r3, #1
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b0f      	cmp	r3, #15
 80058e2:	d9dc      	bls.n	800589e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	e034      	b.n	8005954 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	015a      	lsls	r2, r3, #5
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005900:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005908:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005910:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	3301      	adds	r3, #1
 8005928:	617b      	str	r3, [r7, #20]
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005930:	d80c      	bhi.n	800594c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005948:	d0ec      	beq.n	8005924 <USB_StopHost+0xb0>
 800594a:	e000      	b.n	800594e <USB_StopHost+0xda>
        break;
 800594c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	3301      	adds	r3, #1
 8005952:	613b      	str	r3, [r7, #16]
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b0f      	cmp	r3, #15
 8005958:	d9c7      	bls.n	80058ea <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005960:	461a      	mov	r2, r3
 8005962:	f04f 33ff 	mov.w	r3, #4294967295
 8005966:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f04f 32ff 	mov.w	r2, #4294967295
 800596e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff f8af 	bl	8004ad4 <USB_EnableGlobalInt>

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b089      	sub	sp, #36	; 0x24
 8005984:	af04      	add	r7, sp, #16
 8005986:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005988:	2301      	movs	r3, #1
 800598a:	2202      	movs	r2, #2
 800598c:	2102      	movs	r1, #2
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fc66 	bl	8006260 <USBH_FindInterface>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2bff      	cmp	r3, #255	; 0xff
 800599c:	d002      	beq.n	80059a4 <USBH_CDC_InterfaceInit+0x24>
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d901      	bls.n	80059a8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80059a4:	2302      	movs	r3, #2
 80059a6:	e13d      	b.n	8005c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
 80059aa:	4619      	mov	r1, r3
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fc3b 	bl	8006228 <USBH_SelectInterface>
 80059b2:	4603      	mov	r3, r0
 80059b4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80059bc:	2302      	movs	r3, #2
 80059be:	e131      	b.n	8005c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80059c6:	2050      	movs	r0, #80	; 0x50
 80059c8:	f002 fa00 	bl	8007dcc <malloc>
 80059cc:	4603      	mov	r3, r0
 80059ce:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80059e0:	2302      	movs	r3, #2
 80059e2:	e11f      	b.n	8005c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80059e4:	2250      	movs	r2, #80	; 0x50
 80059e6:	2100      	movs	r1, #0
 80059e8:	68b8      	ldr	r0, [r7, #8]
 80059ea:	f002 f9ff 	bl	8007dec <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	211a      	movs	r1, #26
 80059f4:	fb01 f303 	mul.w	r3, r1, r3
 80059f8:	4413      	add	r3, r2
 80059fa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	b25b      	sxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	da15      	bge.n	8005a32 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	211a      	movs	r1, #26
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	211a      	movs	r1, #26
 8005a22:	fb01 f303 	mul.w	r3, r1, r3
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a2c:	881a      	ldrh	r2, [r3, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 fe32 	bl	80076a2 <USBH_AllocPipe>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	7819      	ldrb	r1, [r3, #0]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	7858      	ldrb	r0, [r3, #1]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	8952      	ldrh	r2, [r2, #10]
 8005a5e:	9202      	str	r2, [sp, #8]
 8005a60:	2203      	movs	r2, #3
 8005a62:	9201      	str	r2, [sp, #4]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	4623      	mov	r3, r4
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f001 fdea 	bl	8007644 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2200      	movs	r2, #0
 8005a76:	4619      	mov	r1, r3
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f002 f8f9 	bl	8007c70 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2200      	movs	r2, #0
 8005a82:	210a      	movs	r1, #10
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fbeb 	bl	8006260 <USBH_FindInterface>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005a8e:	7bfb      	ldrb	r3, [r7, #15]
 8005a90:	2bff      	cmp	r3, #255	; 0xff
 8005a92:	d002      	beq.n	8005a9a <USBH_CDC_InterfaceInit+0x11a>
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d901      	bls.n	8005a9e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e0c2      	b.n	8005c24 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	211a      	movs	r1, #26
 8005aa4:	fb01 f303 	mul.w	r3, r1, r3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	da16      	bge.n	8005ae4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	211a      	movs	r1, #26
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	211a      	movs	r1, #26
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005adc:	881a      	ldrh	r2, [r3, #0]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	835a      	strh	r2, [r3, #26]
 8005ae2:	e015      	b.n	8005b10 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	211a      	movs	r1, #26
 8005aea:	fb01 f303 	mul.w	r3, r1, r3
 8005aee:	4413      	add	r3, r2
 8005af0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005af4:	781a      	ldrb	r2, [r3, #0]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	211a      	movs	r1, #26
 8005b00:	fb01 f303 	mul.w	r3, r1, r3
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b0a:	881a      	ldrh	r2, [r3, #0]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	211a      	movs	r1, #26
 8005b16:	fb01 f303 	mul.w	r3, r1, r3
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	b25b      	sxtb	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da16      	bge.n	8005b56 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	211a      	movs	r1, #26
 8005b2e:	fb01 f303 	mul.w	r3, r1, r3
 8005b32:	4413      	add	r3, r2
 8005b34:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b38:	781a      	ldrb	r2, [r3, #0]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	211a      	movs	r1, #26
 8005b44:	fb01 f303 	mul.w	r3, r1, r3
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	835a      	strh	r2, [r3, #26]
 8005b54:	e015      	b.n	8005b82 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b56:	7bfb      	ldrb	r3, [r7, #15]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	211a      	movs	r1, #26
 8005b5c:	fb01 f303 	mul.w	r3, r1, r3
 8005b60:	4413      	add	r3, r2
 8005b62:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b66:	781a      	ldrb	r2, [r3, #0]
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	211a      	movs	r1, #26
 8005b72:	fb01 f303 	mul.w	r3, r1, r3
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b7c:	881a      	ldrh	r2, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	7b9b      	ldrb	r3, [r3, #14]
 8005b86:	4619      	mov	r1, r3
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f001 fd8a 	bl	80076a2 <USBH_AllocPipe>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	461a      	mov	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	7bdb      	ldrb	r3, [r3, #15]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 fd80 	bl	80076a2 <USBH_AllocPipe>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	7b59      	ldrb	r1, [r3, #13]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	7b98      	ldrb	r0, [r3, #14]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	8b12      	ldrh	r2, [r2, #24]
 8005bc2:	9202      	str	r2, [sp, #8]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	9201      	str	r2, [sp, #4]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4623      	mov	r3, r4
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fd38 	bl	8007644 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	7b19      	ldrb	r1, [r3, #12]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	7bd8      	ldrb	r0, [r3, #15]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	8b52      	ldrh	r2, [r2, #26]
 8005bec:	9202      	str	r2, [sp, #8]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	9201      	str	r2, [sp, #4]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	4623      	mov	r3, r4
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 fd23 	bl	8007644 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	7b5b      	ldrb	r3, [r3, #13]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f002 f82e 	bl	8007c70 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	7b1b      	ldrb	r3, [r3, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f002 f827 	bl	8007c70 <USBH_LL_SetToggle>

  return USBH_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd90      	pop	{r4, r7, pc}

08005c2c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00e      	beq.n	8005c64 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f001 fd18 	bl	8007682 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f001 fd43 	bl	80076e4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	7b1b      	ldrb	r3, [r3, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00e      	beq.n	8005c8a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	7b1b      	ldrb	r3, [r3, #12]
 8005c70:	4619      	mov	r1, r3
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 fd05 	bl	8007682 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	7b1b      	ldrb	r3, [r3, #12]
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f001 fd30 	bl	80076e4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	7b5b      	ldrb	r3, [r3, #13]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00e      	beq.n	8005cb0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	7b5b      	ldrb	r3, [r3, #13]
 8005c96:	4619      	mov	r1, r3
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f001 fcf2 	bl	8007682 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	7b5b      	ldrb	r3, [r3, #13]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 fd1d 	bl	80076e4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cc2:	69db      	ldr	r3, [r3, #28]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f002 f889 	bl	8007ddc <free>
    phost->pActiveClass->pData = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3340      	adds	r3, #64	; 0x40
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f8b1 	bl	8005e5e <GetLineCoding>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005d00:	7afb      	ldrb	r3, [r7, #11]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d105      	bne.n	8005d12 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d0c:	2102      	movs	r1, #2
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005d12:	7afb      	ldrb	r3, [r7, #11]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d24:	2301      	movs	r3, #1
 8005d26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005d3c:	2b04      	cmp	r3, #4
 8005d3e:	d877      	bhi.n	8005e30 <USBH_CDC_Process+0x114>
 8005d40:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <USBH_CDC_Process+0x2c>)
 8005d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d46:	bf00      	nop
 8005d48:	08005d5d 	.word	0x08005d5d
 8005d4c:	08005d63 	.word	0x08005d63
 8005d50:	08005d93 	.word	0x08005d93
 8005d54:	08005e07 	.word	0x08005e07
 8005d58:	08005e15 	.word	0x08005e15
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d60:	e06d      	b.n	8005e3e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f897 	bl	8005e9c <SetLineCoding>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d104      	bne.n	8005d82 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005d80:	e058      	b.n	8005e34 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d055      	beq.n	8005e34 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2204      	movs	r2, #4
 8005d8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005d90:	e050      	b.n	8005e34 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	3340      	adds	r3, #64	; 0x40
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 f860 	bl	8005e5e <GetLineCoding>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d126      	bne.n	8005df6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dba:	791b      	ldrb	r3, [r3, #4]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d13b      	bne.n	8005e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dca:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d133      	bne.n	8005e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dda:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d12b      	bne.n	8005e38 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d124      	bne.n	8005e38 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f958 	bl	80060a4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005df4:	e020      	b.n	8005e38 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005df6:	7bbb      	ldrb	r3, [r7, #14]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d01d      	beq.n	8005e38 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005e04:	e018      	b.n	8005e38 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 f867 	bl	8005eda <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f000 f8da 	bl	8005fc6 <CDC_ProcessReception>
      break;
 8005e12:	e014      	b.n	8005e3e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005e14:	2100      	movs	r1, #0
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 ffe3 	bl	8006de2 <USBH_ClrFeature>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e20:	7bbb      	ldrb	r3, [r7, #14]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10a      	bne.n	8005e3c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005e2e:	e005      	b.n	8005e3c <USBH_CDC_Process+0x120>

    default:
      break;
 8005e30:	bf00      	nop
 8005e32:	e004      	b.n	8005e3e <USBH_CDC_Process+0x122>
      break;
 8005e34:	bf00      	nop
 8005e36:	e002      	b.n	8005e3e <USBH_CDC_Process+0x122>
      break;
 8005e38:	bf00      	nop
 8005e3a:	e000      	b.n	8005e3e <USBH_CDC_Process+0x122>
      break;
 8005e3c:	bf00      	nop

  }

  return status;
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	22a1      	movs	r2, #161	; 0xa1
 8005e6c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2221      	movs	r2, #33	; 0x21
 8005e72:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2207      	movs	r2, #7
 8005e84:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2207      	movs	r2, #7
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 f988 	bl	80071a2 <USBH_CtlReq>
 8005e92:	4603      	mov	r3, r0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2221      	movs	r2, #33	; 0x21
 8005eaa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2207      	movs	r2, #7
 8005ec2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f001 f969 	bl	80071a2 <USBH_CtlReq>
 8005ed0:	4603      	mov	r3, r0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3708      	adds	r7, #8
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b086      	sub	sp, #24
 8005ede:	af02      	add	r7, sp, #8
 8005ee0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005eec:	2300      	movs	r3, #0
 8005eee:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d002      	beq.n	8005f00 <CDC_ProcessTransmission+0x26>
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d023      	beq.n	8005f46 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005efe:	e05e      	b.n	8005fbe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	8b12      	ldrh	r2, [r2, #24]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d90b      	bls.n	8005f24 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	69d9      	ldr	r1, [r3, #28]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8b1a      	ldrh	r2, [r3, #24]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	7b5b      	ldrb	r3, [r3, #13]
 8005f18:	2001      	movs	r0, #1
 8005f1a:	9000      	str	r0, [sp, #0]
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fb4e 	bl	80075be <USBH_BulkSendData>
 8005f22:	e00b      	b.n	8005f3c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	7b5b      	ldrb	r3, [r3, #13]
 8005f32:	2001      	movs	r0, #1
 8005f34:	9000      	str	r0, [sp, #0]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fb41 	bl	80075be <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f44:	e03b      	b.n	8005fbe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	7b5b      	ldrb	r3, [r3, #13]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f001 fe65 	bl	8007c1c <USBH_LL_GetURBState>
 8005f52:	4603      	mov	r3, r0
 8005f54:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005f56:	7afb      	ldrb	r3, [r7, #11]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d128      	bne.n	8005fae <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	8b12      	ldrh	r2, [r2, #24]
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d90e      	bls.n	8005f86 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	8b12      	ldrh	r2, [r2, #24]
 8005f70:	1a9a      	subs	r2, r3, r2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	8b12      	ldrh	r2, [r2, #24]
 8005f7e:	441a      	add	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	61da      	str	r2, [r3, #28]
 8005f84:	e002      	b.n	8005f8c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d004      	beq.n	8005f9e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f9c:	e00e      	b.n	8005fbc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f868 	bl	800607c <USBH_CDC_TransmitCallback>
      break;
 8005fac:	e006      	b.n	8005fbc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005fae:	7afb      	ldrb	r3, [r7, #11]
 8005fb0:	2b02      	cmp	r3, #2
 8005fb2:	d103      	bne.n	8005fbc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005fbc:	bf00      	nop
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b086      	sub	sp, #24
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d002      	beq.n	8005fec <CDC_ProcessReception+0x26>
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d00e      	beq.n	8006008 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005fea:	e043      	b.n	8006074 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	6a19      	ldr	r1, [r3, #32]
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	8b5a      	ldrh	r2, [r3, #26]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	7b1b      	ldrb	r3, [r3, #12]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fb05 	bl	8007608 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	2204      	movs	r2, #4
 8006002:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006006:	e035      	b.n	8006074 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	7b1b      	ldrb	r3, [r3, #12]
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fe04 	bl	8007c1c <USBH_LL_GetURBState>
 8006014:	4603      	mov	r3, r0
 8006016:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006018:	7cfb      	ldrb	r3, [r7, #19]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d129      	bne.n	8006072 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	7b1b      	ldrb	r3, [r3, #12]
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 fd67 	bl	8007af8 <USBH_LL_GetLastXferSize>
 800602a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	429a      	cmp	r2, r3
 8006034:	d016      	beq.n	8006064 <CDC_ProcessReception+0x9e>
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	8b5b      	ldrh	r3, [r3, #26]
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4293      	cmp	r3, r2
 8006040:	d910      	bls.n	8006064 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	6a1a      	ldr	r2, [r3, #32]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	441a      	add	r2, r3
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	2203      	movs	r2, #3
 800605e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006062:	e006      	b.n	8006072 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f80f 	bl	8006090 <USBH_CDC_ReceiveCallback>
      break;
 8006072:	bf00      	nop
  }
}
 8006074:	bf00      	nop
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060ac:	bf00      	nop
 80060ae:	370c      	adds	r7, #12
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80060cc:	2302      	movs	r3, #2
 80060ce:	e029      	b.n	8006124 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	79fa      	ldrb	r2, [r7, #7]
 80060d4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 f81f 	bl	800612c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f001 fc37 	bl	8007990 <USBH_LL_Init>

  return USBH_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	e009      	b.n	8006152 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	33e0      	adds	r3, #224	; 0xe0
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	2200      	movs	r2, #0
 800614a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	3301      	adds	r3, #1
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b0e      	cmp	r3, #14
 8006156:	d9f2      	bls.n	800613e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	e009      	b.n	8006172 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4413      	add	r3, r2
 8006164:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006178:	d3f1      	bcc.n	800615e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2240      	movs	r2, #64	; 0x40
 800619e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b085      	sub	sp, #20
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80061de:	2300      	movs	r3, #0
 80061e0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d016      	beq.n	8006216 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10e      	bne.n	8006210 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	33de      	adds	r3, #222	; 0xde
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	73fb      	strb	r3, [r7, #15]
 800620e:	e004      	b.n	800621a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006210:	2302      	movs	r3, #2
 8006212:	73fb      	strb	r3, [r7, #15]
 8006214:	e001      	b.n	800621a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006216:	2302      	movs	r3, #2
 8006218:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800621a:	7bfb      	ldrb	r3, [r7, #15]
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800623e:	78fa      	ldrb	r2, [r7, #3]
 8006240:	429a      	cmp	r2, r3
 8006242:	d204      	bcs.n	800624e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	78fa      	ldrb	r2, [r7, #3]
 8006248:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800624c:	e001      	b.n	8006252 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800624e:	2302      	movs	r3, #2
 8006250:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4603      	mov	r3, r0
 8006270:	70fb      	strb	r3, [r7, #3]
 8006272:	460b      	mov	r3, r1
 8006274:	70bb      	strb	r3, [r7, #2]
 8006276:	4613      	mov	r3, r2
 8006278:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800627a:	2300      	movs	r3, #0
 800627c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006288:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800628a:	e025      	b.n	80062d8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	221a      	movs	r2, #26
 8006290:	fb02 f303 	mul.w	r3, r2, r3
 8006294:	3308      	adds	r3, #8
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	3302      	adds	r3, #2
 800629c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	795b      	ldrb	r3, [r3, #5]
 80062a2:	78fa      	ldrb	r2, [r7, #3]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d002      	beq.n	80062ae <USBH_FindInterface+0x4e>
 80062a8:	78fb      	ldrb	r3, [r7, #3]
 80062aa:	2bff      	cmp	r3, #255	; 0xff
 80062ac:	d111      	bne.n	80062d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80062b2:	78ba      	ldrb	r2, [r7, #2]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d002      	beq.n	80062be <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062b8:	78bb      	ldrb	r3, [r7, #2]
 80062ba:	2bff      	cmp	r3, #255	; 0xff
 80062bc:	d109      	bne.n	80062d2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062c2:	787a      	ldrb	r2, [r7, #1]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d002      	beq.n	80062ce <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80062c8:	787b      	ldrb	r3, [r7, #1]
 80062ca:	2bff      	cmp	r3, #255	; 0xff
 80062cc:	d101      	bne.n	80062d2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80062ce:	7dfb      	ldrb	r3, [r7, #23]
 80062d0:	e006      	b.n	80062e0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80062d2:	7dfb      	ldrb	r3, [r7, #23]
 80062d4:	3301      	adds	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d9d6      	bls.n	800628c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80062de:	23ff      	movs	r3, #255	; 0xff
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fb87 	bl	8007a08 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80062fa:	2101      	movs	r1, #1
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fca0 	bl	8007c42 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af04      	add	r7, sp, #16
 8006312:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006314:	2302      	movs	r3, #2
 8006316:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d102      	bne.n	800632e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2203      	movs	r2, #3
 800632c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b0b      	cmp	r3, #11
 8006336:	f200 81b3 	bhi.w	80066a0 <USBH_Process+0x394>
 800633a:	a201      	add	r2, pc, #4	; (adr r2, 8006340 <USBH_Process+0x34>)
 800633c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006340:	08006371 	.word	0x08006371
 8006344:	080063a3 	.word	0x080063a3
 8006348:	0800640b 	.word	0x0800640b
 800634c:	0800663b 	.word	0x0800663b
 8006350:	080066a1 	.word	0x080066a1
 8006354:	080064af 	.word	0x080064af
 8006358:	080065e1 	.word	0x080065e1
 800635c:	080064e5 	.word	0x080064e5
 8006360:	08006505 	.word	0x08006505
 8006364:	08006525 	.word	0x08006525
 8006368:	08006553 	.word	0x08006553
 800636c:	08006623 	.word	0x08006623
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8193 	beq.w	80066a4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006384:	20c8      	movs	r0, #200	; 0xc8
 8006386:	f001 fca3 	bl	8007cd0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fb99 	bl	8007ac2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80063a0:	e180      	b.n	80066a4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d107      	bne.n	80063bc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80063ba:	e182      	b.n	80066c2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80063c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063c6:	d914      	bls.n	80063f2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80063ce:	3301      	adds	r3, #1
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d903      	bls.n	80063ea <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	220d      	movs	r2, #13
 80063e6:	701a      	strb	r2, [r3, #0]
      break;
 80063e8:	e16b      	b.n	80066c2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	701a      	strb	r2, [r3, #0]
      break;
 80063f0:	e167      	b.n	80066c2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80063f8:	f103 020a 	add.w	r2, r3, #10
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006402:	200a      	movs	r0, #10
 8006404:	f001 fc64 	bl	8007cd0 <USBH_Delay>
      break;
 8006408:	e15b      	b.n	80066c2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006410:	2b00      	cmp	r3, #0
 8006412:	d005      	beq.n	8006420 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800641a:	2104      	movs	r1, #4
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006420:	2064      	movs	r0, #100	; 0x64
 8006422:	f001 fc55 	bl	8007cd0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 fb24 	bl	8007a74 <USBH_LL_GetSpeed>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2205      	movs	r2, #5
 800643a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800643c:	2100      	movs	r1, #0
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f001 f92f 	bl	80076a2 <USBH_AllocPipe>
 8006444:	4603      	mov	r3, r0
 8006446:	461a      	mov	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800644c:	2180      	movs	r1, #128	; 0x80
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 f927 	bl	80076a2 <USBH_AllocPipe>
 8006454:	4603      	mov	r3, r0
 8006456:	461a      	mov	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	7919      	ldrb	r1, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006470:	b292      	uxth	r2, r2
 8006472:	9202      	str	r2, [sp, #8]
 8006474:	2200      	movs	r2, #0
 8006476:	9201      	str	r2, [sp, #4]
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4603      	mov	r3, r0
 800647c:	2280      	movs	r2, #128	; 0x80
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f001 f8e0 	bl	8007644 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	7959      	ldrb	r1, [r3, #5]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006498:	b292      	uxth	r2, r2
 800649a:	9202      	str	r2, [sp, #8]
 800649c:	2200      	movs	r2, #0
 800649e:	9201      	str	r2, [sp, #4]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	4603      	mov	r3, r0
 80064a4:	2200      	movs	r2, #0
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f001 f8cc 	bl	8007644 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064ac:	e109      	b.n	80066c2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f90c 	bl	80066cc <USBH_HandleEnum>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 80f3 	bne.w	80066a8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d103      	bne.n	80064dc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2208      	movs	r2, #8
 80064d8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80064da:	e0e5      	b.n	80066a8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2207      	movs	r2, #7
 80064e0:	701a      	strb	r2, [r3, #0]
      break;
 80064e2:	e0e1      	b.n	80066a8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	f000 80de 	beq.w	80066ac <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064f6:	2101      	movs	r1, #1
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2208      	movs	r2, #8
 8006500:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006502:	e0d3      	b.n	80066ac <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800650a:	b29b      	uxth	r3, r3
 800650c:	4619      	mov	r1, r3
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fc20 	bl	8006d54 <USBH_SetCfg>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	f040 80ca 	bne.w	80066b0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2209      	movs	r2, #9
 8006520:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006522:	e0c5      	b.n	80066b0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800652a:	f003 0320 	and.w	r3, r3, #32
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00b      	beq.n	800654a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006532:	2101      	movs	r1, #1
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fc30 	bl	8006d9a <USBH_SetFeature>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 80b9 	bne.w	80066b4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	220a      	movs	r2, #10
 8006546:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006548:	e0b4      	b.n	80066b4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	220a      	movs	r2, #10
 800654e:	701a      	strb	r2, [r3, #0]
      break;
 8006550:	e0b0      	b.n	80066b4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 80ad 	beq.w	80066b8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
 800656a:	e016      	b.n	800659a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800656c:	7bfa      	ldrb	r2, [r7, #15]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	32de      	adds	r2, #222	; 0xde
 8006572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006576:	791a      	ldrb	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800657e:	429a      	cmp	r2, r3
 8006580:	d108      	bne.n	8006594 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006582:	7bfa      	ldrb	r2, [r7, #15]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	32de      	adds	r2, #222	; 0xde
 8006588:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006592:	e005      	b.n	80065a0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	3301      	adds	r3, #1
 8006598:	73fb      	strb	r3, [r7, #15]
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0e5      	beq.n	800656c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d016      	beq.n	80065d8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d109      	bne.n	80065d0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2206      	movs	r2, #6
 80065c0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80065c8:	2103      	movs	r1, #3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80065ce:	e073      	b.n	80066b8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	220d      	movs	r2, #13
 80065d4:	701a      	strb	r2, [r3, #0]
      break;
 80065d6:	e06f      	b.n	80066b8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	220d      	movs	r2, #13
 80065dc:	701a      	strb	r2, [r3, #0]
      break;
 80065de:	e06b      	b.n	80066b8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d017      	beq.n	800661a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	4798      	blx	r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80065fa:	7bbb      	ldrb	r3, [r7, #14]
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d103      	bne.n	800660a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	220b      	movs	r2, #11
 8006606:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006608:	e058      	b.n	80066bc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800660a:	7bbb      	ldrb	r3, [r7, #14]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d154      	bne.n	80066bc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	220d      	movs	r2, #13
 8006616:	701a      	strb	r2, [r3, #0]
      break;
 8006618:	e050      	b.n	80066bc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	220d      	movs	r2, #13
 800661e:	701a      	strb	r2, [r3, #0]
      break;
 8006620:	e04c      	b.n	80066bc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d049      	beq.n	80066c0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	4798      	blx	r3
      }
      break;
 8006638:	e042      	b.n	80066c0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff fd72 	bl	800612c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800664e:	2b00      	cmp	r3, #0
 8006650:	d009      	beq.n	8006666 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d005      	beq.n	800667c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006676:	2105      	movs	r1, #5
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b01      	cmp	r3, #1
 8006686:	d107      	bne.n	8006698 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7ff fe2b 	bl	80062ec <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006696:	e014      	b.n	80066c2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f001 f9b5 	bl	8007a08 <USBH_LL_Start>
      break;
 800669e:	e010      	b.n	80066c2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80066a0:	bf00      	nop
 80066a2:	e00e      	b.n	80066c2 <USBH_Process+0x3b6>
      break;
 80066a4:	bf00      	nop
 80066a6:	e00c      	b.n	80066c2 <USBH_Process+0x3b6>
      break;
 80066a8:	bf00      	nop
 80066aa:	e00a      	b.n	80066c2 <USBH_Process+0x3b6>
    break;
 80066ac:	bf00      	nop
 80066ae:	e008      	b.n	80066c2 <USBH_Process+0x3b6>
      break;
 80066b0:	bf00      	nop
 80066b2:	e006      	b.n	80066c2 <USBH_Process+0x3b6>
      break;
 80066b4:	bf00      	nop
 80066b6:	e004      	b.n	80066c2 <USBH_Process+0x3b6>
      break;
 80066b8:	bf00      	nop
 80066ba:	e002      	b.n	80066c2 <USBH_Process+0x3b6>
      break;
 80066bc:	bf00      	nop
 80066be:	e000      	b.n	80066c2 <USBH_Process+0x3b6>
      break;
 80066c0:	bf00      	nop
  }
  return USBH_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af04      	add	r7, sp, #16
 80066d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80066d4:	2301      	movs	r3, #1
 80066d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80066d8:	2301      	movs	r3, #1
 80066da:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	785b      	ldrb	r3, [r3, #1]
 80066e0:	2b07      	cmp	r3, #7
 80066e2:	f200 81c1 	bhi.w	8006a68 <USBH_HandleEnum+0x39c>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <USBH_HandleEnum+0x20>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	0800670d 	.word	0x0800670d
 80066f0:	080067cb 	.word	0x080067cb
 80066f4:	08006835 	.word	0x08006835
 80066f8:	080068c3 	.word	0x080068c3
 80066fc:	0800692d 	.word	0x0800692d
 8006700:	0800699d 	.word	0x0800699d
 8006704:	080069e3 	.word	0x080069e3
 8006708:	08006a29 	.word	0x08006a29
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800670c:	2108      	movs	r1, #8
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa50 	bl	8006bb4 <USBH_Get_DevDesc>
 8006714:	4603      	mov	r3, r0
 8006716:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d130      	bne.n	8006780 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7919      	ldrb	r1, [r3, #4]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006742:	b292      	uxth	r2, r2
 8006744:	9202      	str	r2, [sp, #8]
 8006746:	2200      	movs	r2, #0
 8006748:	9201      	str	r2, [sp, #4]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	4603      	mov	r3, r0
 800674e:	2280      	movs	r2, #128	; 0x80
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 ff77 	bl	8007644 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	7959      	ldrb	r1, [r3, #5]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800676a:	b292      	uxth	r2, r2
 800676c:	9202      	str	r2, [sp, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	9201      	str	r2, [sp, #4]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	4603      	mov	r3, r0
 8006776:	2200      	movs	r2, #0
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 ff63 	bl	8007644 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800677e:	e175      	b.n	8006a6c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	2b03      	cmp	r3, #3
 8006784:	f040 8172 	bne.w	8006a6c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800678e:	3301      	adds	r3, #1
 8006790:	b2da      	uxtb	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800679e:	2b03      	cmp	r3, #3
 80067a0:	d903      	bls.n	80067aa <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	220d      	movs	r2, #13
 80067a6:	701a      	strb	r2, [r3, #0]
      break;
 80067a8:	e160      	b.n	8006a6c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	795b      	ldrb	r3, [r3, #5]
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 ff97 	bl	80076e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	791b      	ldrb	r3, [r3, #4]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 ff91 	bl	80076e4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	701a      	strb	r2, [r3, #0]
      break;
 80067c8:	e150      	b.n	8006a6c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80067ca:	2112      	movs	r1, #18
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f9f1 	bl	8006bb4 <USBH_Get_DevDesc>
 80067d2:	4603      	mov	r3, r0
 80067d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80067d6:	7bbb      	ldrb	r3, [r7, #14]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d103      	bne.n	80067e4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80067e2:	e145      	b.n	8006a70 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	f040 8142 	bne.w	8006a70 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006802:	2b03      	cmp	r3, #3
 8006804:	d903      	bls.n	800680e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	220d      	movs	r2, #13
 800680a:	701a      	strb	r2, [r3, #0]
      break;
 800680c:	e130      	b.n	8006a70 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	795b      	ldrb	r3, [r3, #5]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 ff65 	bl	80076e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	791b      	ldrb	r3, [r3, #4]
 800681e:	4619      	mov	r1, r3
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 ff5f 	bl	80076e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	701a      	strb	r2, [r3, #0]
      break;
 8006832:	e11d      	b.n	8006a70 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006834:	2101      	movs	r1, #1
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa68 	bl	8006d0c <USBH_SetAddress>
 800683c:	4603      	mov	r3, r0
 800683e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006840:	7bbb      	ldrb	r3, [r7, #14]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d132      	bne.n	80068ac <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006846:	2002      	movs	r0, #2
 8006848:	f001 fa42 	bl	8007cd0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2203      	movs	r2, #3
 8006858:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7919      	ldrb	r1, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800686e:	b292      	uxth	r2, r2
 8006870:	9202      	str	r2, [sp, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	9201      	str	r2, [sp, #4]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	4603      	mov	r3, r0
 800687a:	2280      	movs	r2, #128	; 0x80
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fee1 	bl	8007644 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	7959      	ldrb	r1, [r3, #5]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006896:	b292      	uxth	r2, r2
 8006898:	9202      	str	r2, [sp, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	9201      	str	r2, [sp, #4]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	4603      	mov	r3, r0
 80068a2:	2200      	movs	r2, #0
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 fecd 	bl	8007644 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80068aa:	e0e3      	b.n	8006a74 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068ac:	7bbb      	ldrb	r3, [r7, #14]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	f040 80e0 	bne.w	8006a74 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	220d      	movs	r2, #13
 80068b8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	705a      	strb	r2, [r3, #1]
      break;
 80068c0:	e0d8      	b.n	8006a74 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80068c2:	2109      	movs	r1, #9
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f99d 	bl	8006c04 <USBH_Get_CfgDesc>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80068ce:	7bbb      	ldrb	r3, [r7, #14]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d103      	bne.n	80068dc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2204      	movs	r2, #4
 80068d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80068da:	e0cd      	b.n	8006a78 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	2b03      	cmp	r3, #3
 80068e0:	f040 80ca 	bne.w	8006a78 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068ea:	3301      	adds	r3, #1
 80068ec:	b2da      	uxtb	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d903      	bls.n	8006906 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	220d      	movs	r2, #13
 8006902:	701a      	strb	r2, [r3, #0]
      break;
 8006904:	e0b8      	b.n	8006a78 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	795b      	ldrb	r3, [r3, #5]
 800690a:	4619      	mov	r1, r3
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fee9 	bl	80076e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	791b      	ldrb	r3, [r3, #4]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fee3 	bl	80076e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	701a      	strb	r2, [r3, #0]
      break;
 800692a:	e0a5      	b.n	8006a78 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f965 	bl	8006c04 <USBH_Get_CfgDesc>
 800693a:	4603      	mov	r3, r0
 800693c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d103      	bne.n	800694c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2205      	movs	r2, #5
 8006948:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800694a:	e097      	b.n	8006a7c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800694c:	7bbb      	ldrb	r3, [r7, #14]
 800694e:	2b03      	cmp	r3, #3
 8006950:	f040 8094 	bne.w	8006a7c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800695a:	3301      	adds	r3, #1
 800695c:	b2da      	uxtb	r2, r3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800696a:	2b03      	cmp	r3, #3
 800696c:	d903      	bls.n	8006976 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	220d      	movs	r2, #13
 8006972:	701a      	strb	r2, [r3, #0]
      break;
 8006974:	e082      	b.n	8006a7c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	795b      	ldrb	r3, [r3, #5]
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 feb1 	bl	80076e4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	791b      	ldrb	r3, [r3, #4]
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 feab 	bl	80076e4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	701a      	strb	r2, [r3, #0]
      break;
 800699a:	e06f      	b.n	8006a7c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d019      	beq.n	80069da <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80069b2:	23ff      	movs	r3, #255	; 0xff
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 f949 	bl	8006c4c <USBH_Get_StringDesc>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2206      	movs	r2, #6
 80069c8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80069ca:	e059      	b.n	8006a80 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d156      	bne.n	8006a80 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2206      	movs	r2, #6
 80069d6:	705a      	strb	r2, [r3, #1]
      break;
 80069d8:	e052      	b.n	8006a80 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2206      	movs	r2, #6
 80069de:	705a      	strb	r2, [r3, #1]
      break;
 80069e0:	e04e      	b.n	8006a80 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d019      	beq.n	8006a20 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80069f8:	23ff      	movs	r3, #255	; 0xff
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f926 	bl	8006c4c <USBH_Get_StringDesc>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a04:	7bbb      	ldrb	r3, [r7, #14]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d103      	bne.n	8006a12 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2207      	movs	r2, #7
 8006a0e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006a10:	e038      	b.n	8006a84 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	2b03      	cmp	r3, #3
 8006a16:	d135      	bne.n	8006a84 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2207      	movs	r2, #7
 8006a1c:	705a      	strb	r2, [r3, #1]
      break;
 8006a1e:	e031      	b.n	8006a84 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2207      	movs	r2, #7
 8006a24:	705a      	strb	r2, [r3, #1]
      break;
 8006a26:	e02d      	b.n	8006a84 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d017      	beq.n	8006a62 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006a3e:	23ff      	movs	r3, #255	; 0xff
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 f903 	bl	8006c4c <USBH_Get_StringDesc>
 8006a46:	4603      	mov	r3, r0
 8006a48:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d102      	bne.n	8006a56 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006a54:	e018      	b.n	8006a88 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006a56:	7bbb      	ldrb	r3, [r7, #14]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d115      	bne.n	8006a88 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a60:	e012      	b.n	8006a88 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006a62:	2300      	movs	r3, #0
 8006a64:	73fb      	strb	r3, [r7, #15]
      break;
 8006a66:	e00f      	b.n	8006a88 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006a68:	bf00      	nop
 8006a6a:	e00e      	b.n	8006a8a <USBH_HandleEnum+0x3be>
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e00c      	b.n	8006a8a <USBH_HandleEnum+0x3be>
      break;
 8006a70:	bf00      	nop
 8006a72:	e00a      	b.n	8006a8a <USBH_HandleEnum+0x3be>
      break;
 8006a74:	bf00      	nop
 8006a76:	e008      	b.n	8006a8a <USBH_HandleEnum+0x3be>
      break;
 8006a78:	bf00      	nop
 8006a7a:	e006      	b.n	8006a8a <USBH_HandleEnum+0x3be>
      break;
 8006a7c:	bf00      	nop
 8006a7e:	e004      	b.n	8006a8a <USBH_HandleEnum+0x3be>
      break;
 8006a80:	bf00      	nop
 8006a82:	e002      	b.n	8006a8a <USBH_HandleEnum+0x3be>
      break;
 8006a84:	bf00      	nop
 8006a86:	e000      	b.n	8006a8a <USBH_HandleEnum+0x3be>
      break;
 8006a88:	bf00      	nop
  }
  return Status;
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f804 	bl	8006ad6 <USBH_HandleSof>
}
 8006ace:	bf00      	nop
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b082      	sub	sp, #8
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b0b      	cmp	r3, #11
 8006ae6:	d10a      	bne.n	8006afe <USBH_HandleSof+0x28>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
  }
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006b16:	bf00      	nop
}
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006b32:	bf00      	nop
}
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b083      	sub	sp, #12
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 ff56 	bl	8007a3e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	791b      	ldrb	r3, [r3, #4]
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fda3 	bl	80076e4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	795b      	ldrb	r3, [r3, #5]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fd9d 	bl	80076e4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af02      	add	r7, sp, #8
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f864 	bl	8006ca2 <USBH_GetDescriptor>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	f000 f918 	bl	8006e2a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	331c      	adds	r3, #28
 8006c14:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006c16:	887b      	ldrh	r3, [r7, #2]
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c20:	2100      	movs	r1, #0
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f83d 	bl	8006ca2 <USBH_GetDescriptor>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	72fb      	strb	r3, [r7, #11]
 8006c2c:	7afb      	ldrb	r3, [r7, #11]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d107      	bne.n	8006c42 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006c38:	887a      	ldrh	r2, [r7, #2]
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 f964 	bl	8006f0a <USBH_ParseCfgDesc>
  }

  return status;
 8006c42:	7afb      	ldrb	r3, [r7, #11]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	461a      	mov	r2, r3
 8006c58:	460b      	mov	r3, r1
 8006c5a:	72fb      	strb	r3, [r7, #11]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006c60:	7afb      	ldrb	r3, [r7, #11]
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c68:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006c70:	893b      	ldrh	r3, [r7, #8]
 8006c72:	9300      	str	r3, [sp, #0]
 8006c74:	460b      	mov	r3, r1
 8006c76:	2100      	movs	r1, #0
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f000 f812 	bl	8006ca2 <USBH_GetDescriptor>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	75fb      	strb	r3, [r7, #23]
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d107      	bne.n	8006c98 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c8e:	893a      	ldrh	r2, [r7, #8]
 8006c90:	6879      	ldr	r1, [r7, #4]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fa37 	bl	8007106 <USBH_ParseStringDesc>
  }

  return status;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3718      	adds	r7, #24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	607b      	str	r3, [r7, #4]
 8006cac:	460b      	mov	r3, r1
 8006cae:	72fb      	strb	r3, [r7, #11]
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	789b      	ldrb	r3, [r3, #2]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d11c      	bne.n	8006cf6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006cbc:	7afb      	ldrb	r3, [r7, #11]
 8006cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2206      	movs	r2, #6
 8006ccc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	893a      	ldrh	r2, [r7, #8]
 8006cd2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006cd4:	893b      	ldrh	r3, [r7, #8]
 8006cd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cde:	d104      	bne.n	8006cea <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f240 4209 	movw	r2, #1033	; 0x409
 8006ce6:	829a      	strh	r2, [r3, #20]
 8006ce8:	e002      	b.n	8006cf0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8b3a      	ldrh	r2, [r7, #24]
 8006cf4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006cf6:	8b3b      	ldrh	r3, [r7, #24]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6879      	ldr	r1, [r7, #4]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 fa50 	bl	80071a2 <USBH_CtlReq>
 8006d02:	4603      	mov	r3, r0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	789b      	ldrb	r3, [r3, #2]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d10f      	bne.n	8006d40 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2205      	movs	r2, #5
 8006d2a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d40:	2200      	movs	r2, #0
 8006d42:	2100      	movs	r1, #0
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 fa2c 	bl	80071a2 <USBH_CtlReq>
 8006d4a:	4603      	mov	r3, r0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3708      	adds	r7, #8
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	789b      	ldrb	r3, [r3, #2]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d10e      	bne.n	8006d86 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2209      	movs	r2, #9
 8006d72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	887a      	ldrh	r2, [r7, #2]
 8006d78:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006d86:	2200      	movs	r2, #0
 8006d88:	2100      	movs	r1, #0
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 fa09 	bl	80071a2 <USBH_CtlReq>
 8006d90:	4603      	mov	r3, r0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	789b      	ldrb	r3, [r3, #2]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d10f      	bne.n	8006dce <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2203      	movs	r2, #3
 8006db8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006dba:	78fb      	ldrb	r3, [r7, #3]
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f9e5 	bl	80071a2 <USBH_CtlReq>
 8006dd8:	4603      	mov	r3, r0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b082      	sub	sp, #8
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	789b      	ldrb	r3, [r3, #2]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d10f      	bne.n	8006e16 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006e08:	78fb      	ldrb	r3, [r7, #3]
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f9c1 	bl	80071a2 <USBH_CtlReq>
 8006e20:	4603      	mov	r3, r0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	4613      	mov	r3, r2
 8006e36:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	781a      	ldrb	r2, [r3, #0]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	785a      	ldrb	r2, [r3, #1]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	3302      	adds	r3, #2
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	3303      	adds	r3, #3
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	021b      	lsls	r3, r3, #8
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	791a      	ldrb	r2, [r3, #4]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	795a      	ldrb	r2, [r3, #5]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	799a      	ldrb	r2, [r3, #6]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	79da      	ldrb	r2, [r3, #7]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006e84:	88fb      	ldrh	r3, [r7, #6]
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d939      	bls.n	8006efe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3308      	adds	r3, #8
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	3309      	adds	r3, #9
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	330a      	adds	r3, #10
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	330b      	adds	r3, #11
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	330d      	adds	r3, #13
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	021b      	lsls	r3, r3, #8
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	7b9a      	ldrb	r2, [r3, #14]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	7bda      	ldrb	r2, [r3, #15]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	7c1a      	ldrb	r2, [r3, #16]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	7c5a      	ldrb	r2, [r3, #17]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	745a      	strb	r2, [r3, #17]
  }
}
 8006efe:	bf00      	nop
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b08a      	sub	sp, #40	; 0x28
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	4613      	mov	r3, r2
 8006f16:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	781a      	ldrb	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	785a      	ldrb	r2, [r3, #1]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	3302      	adds	r3, #2
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	3303      	adds	r3, #3
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	021b      	lsls	r3, r3, #8
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	4313      	orrs	r3, r2
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	791a      	ldrb	r2, [r3, #4]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	795a      	ldrb	r2, [r3, #5]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	799a      	ldrb	r2, [r3, #6]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	79da      	ldrb	r2, [r3, #7]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	7a1a      	ldrb	r2, [r3, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	2b09      	cmp	r3, #9
 8006f84:	d95f      	bls.n	8007046 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006f86:	2309      	movs	r3, #9
 8006f88:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006f8e:	e051      	b.n	8007034 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006f90:	f107 0316 	add.w	r3, r7, #22
 8006f94:	4619      	mov	r1, r3
 8006f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f98:	f000 f8e8 	bl	800716c <USBH_GetNextDesc>
 8006f9c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa0:	785b      	ldrb	r3, [r3, #1]
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d146      	bne.n	8007034 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006faa:	221a      	movs	r2, #26
 8006fac:	fb02 f303 	mul.w	r3, r2, r3
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3302      	adds	r3, #2
 8006fb8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fbc:	69f8      	ldr	r0, [r7, #28]
 8006fbe:	f000 f846 	bl	800704e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006fcc:	e022      	b.n	8007014 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006fce:	f107 0316 	add.w	r3, r7, #22
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006fd6:	f000 f8c9 	bl	800716c <USBH_GetNextDesc>
 8006fda:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	785b      	ldrb	r3, [r3, #1]
 8006fe0:	2b05      	cmp	r3, #5
 8006fe2:	d117      	bne.n	8007014 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fe8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006fec:	3201      	adds	r2, #1
 8006fee:	00d2      	lsls	r2, r2, #3
 8006ff0:	211a      	movs	r1, #26
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	3308      	adds	r3, #8
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	3304      	adds	r3, #4
 8007000:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007002:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007004:	69b8      	ldr	r0, [r7, #24]
 8007006:	f000 f851 	bl	80070ac <USBH_ParseEPDesc>
            ep_ix++;
 800700a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800700e:	3301      	adds	r3, #1
 8007010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	791b      	ldrb	r3, [r3, #4]
 8007018:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800701c:	429a      	cmp	r2, r3
 800701e:	d204      	bcs.n	800702a <USBH_ParseCfgDesc+0x120>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	885a      	ldrh	r2, [r3, #2]
 8007024:	8afb      	ldrh	r3, [r7, #22]
 8007026:	429a      	cmp	r2, r3
 8007028:	d8d1      	bhi.n	8006fce <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800702a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800702e:	3301      	adds	r3, #1
 8007030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007038:	2b01      	cmp	r3, #1
 800703a:	d804      	bhi.n	8007046 <USBH_ParseCfgDesc+0x13c>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	885a      	ldrh	r2, [r3, #2]
 8007040:	8afb      	ldrh	r3, [r7, #22]
 8007042:	429a      	cmp	r2, r3
 8007044:	d8a4      	bhi.n	8006f90 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007046:	bf00      	nop
 8007048:	3728      	adds	r7, #40	; 0x28
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781a      	ldrb	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	785a      	ldrb	r2, [r3, #1]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	789a      	ldrb	r2, [r3, #2]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	78da      	ldrb	r2, [r3, #3]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	791a      	ldrb	r2, [r3, #4]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	795a      	ldrb	r2, [r3, #5]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	799a      	ldrb	r2, [r3, #6]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	79da      	ldrb	r2, [r3, #7]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	7a1a      	ldrb	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	721a      	strb	r2, [r3, #8]
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781a      	ldrb	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	785a      	ldrb	r2, [r3, #1]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	789a      	ldrb	r2, [r3, #2]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	78da      	ldrb	r2, [r3, #3]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	3304      	adds	r3, #4
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	b29a      	uxth	r2, r3
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	3305      	adds	r3, #5
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	4313      	orrs	r3, r2
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	799a      	ldrb	r2, [r3, #6]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	719a      	strb	r2, [r3, #6]
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007104:	4770      	bx	lr

08007106 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007106:	b480      	push	{r7}
 8007108:	b087      	sub	sp, #28
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	4613      	mov	r3, r2
 8007112:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3301      	adds	r3, #1
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	2b03      	cmp	r3, #3
 800711c:	d120      	bne.n	8007160 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	1e9a      	subs	r2, r3, #2
 8007124:	88fb      	ldrh	r3, [r7, #6]
 8007126:	4293      	cmp	r3, r2
 8007128:	bf28      	it	cs
 800712a:	4613      	movcs	r3, r2
 800712c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3302      	adds	r3, #2
 8007132:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007134:	2300      	movs	r3, #0
 8007136:	82fb      	strh	r3, [r7, #22]
 8007138:	e00b      	b.n	8007152 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800713a:	8afb      	ldrh	r3, [r7, #22]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	781a      	ldrb	r2, [r3, #0]
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	3301      	adds	r3, #1
 800714a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800714c:	8afb      	ldrh	r3, [r7, #22]
 800714e:	3302      	adds	r3, #2
 8007150:	82fb      	strh	r3, [r7, #22]
 8007152:	8afa      	ldrh	r2, [r7, #22]
 8007154:	8abb      	ldrh	r3, [r7, #20]
 8007156:	429a      	cmp	r2, r3
 8007158:	d3ef      	bcc.n	800713a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
  }
}
 8007160:	bf00      	nop
 8007162:	371c      	adds	r7, #28
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	881a      	ldrh	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	4413      	add	r3, r2
 8007182:	b29a      	uxth	r2, r3
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4413      	add	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007194:	68fb      	ldr	r3, [r7, #12]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	4613      	mov	r3, r2
 80071ae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80071b0:	2301      	movs	r3, #1
 80071b2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	789b      	ldrb	r3, [r3, #2]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d002      	beq.n	80071c2 <USBH_CtlReq+0x20>
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d00f      	beq.n	80071e0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80071c0:	e027      	b.n	8007212 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	88fa      	ldrh	r2, [r7, #6]
 80071cc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2201      	movs	r2, #1
 80071d2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2202      	movs	r2, #2
 80071d8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80071da:	2301      	movs	r3, #1
 80071dc:	75fb      	strb	r3, [r7, #23]
      break;
 80071de:	e018      	b.n	8007212 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f81b 	bl	800721c <USBH_HandleControl>
 80071e6:	4603      	mov	r3, r0
 80071e8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <USBH_CtlReq+0x54>
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d106      	bne.n	8007204 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	761a      	strb	r2, [r3, #24]
      break;
 8007202:	e005      	b.n	8007210 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007204:	7dfb      	ldrb	r3, [r7, #23]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d102      	bne.n	8007210 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	709a      	strb	r2, [r3, #2]
      break;
 8007210:	bf00      	nop
  }
  return status;
 8007212:	7dfb      	ldrb	r3, [r7, #23]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af02      	add	r7, sp, #8
 8007222:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007224:	2301      	movs	r3, #1
 8007226:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007228:	2300      	movs	r3, #0
 800722a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7e1b      	ldrb	r3, [r3, #24]
 8007230:	3b01      	subs	r3, #1
 8007232:	2b0a      	cmp	r3, #10
 8007234:	f200 8156 	bhi.w	80074e4 <USBH_HandleControl+0x2c8>
 8007238:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <USBH_HandleControl+0x24>)
 800723a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800723e:	bf00      	nop
 8007240:	0800726d 	.word	0x0800726d
 8007244:	08007287 	.word	0x08007287
 8007248:	080072f1 	.word	0x080072f1
 800724c:	08007317 	.word	0x08007317
 8007250:	0800734f 	.word	0x0800734f
 8007254:	08007379 	.word	0x08007379
 8007258:	080073cb 	.word	0x080073cb
 800725c:	080073ed 	.word	0x080073ed
 8007260:	08007429 	.word	0x08007429
 8007264:	0800744f 	.word	0x0800744f
 8007268:	0800748d 	.word	0x0800748d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f103 0110 	add.w	r1, r3, #16
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	795b      	ldrb	r3, [r3, #5]
 8007276:	461a      	mov	r2, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f943 	bl	8007504 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	761a      	strb	r2, [r3, #24]
      break;
 8007284:	e139      	b.n	80074fa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	795b      	ldrb	r3, [r3, #5]
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fcc5 	bl	8007c1c <USBH_LL_GetURBState>
 8007292:	4603      	mov	r3, r0
 8007294:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d11e      	bne.n	80072da <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	7c1b      	ldrb	r3, [r3, #16]
 80072a0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072a4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	8adb      	ldrh	r3, [r3, #22]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80072ae:	7b7b      	ldrb	r3, [r7, #13]
 80072b0:	2b80      	cmp	r3, #128	; 0x80
 80072b2:	d103      	bne.n	80072bc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2203      	movs	r2, #3
 80072b8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80072ba:	e115      	b.n	80074e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2205      	movs	r2, #5
 80072c0:	761a      	strb	r2, [r3, #24]
      break;
 80072c2:	e111      	b.n	80074e8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80072c4:	7b7b      	ldrb	r3, [r7, #13]
 80072c6:	2b80      	cmp	r3, #128	; 0x80
 80072c8:	d103      	bne.n	80072d2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2209      	movs	r2, #9
 80072ce:	761a      	strb	r2, [r3, #24]
      break;
 80072d0:	e10a      	b.n	80074e8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2207      	movs	r2, #7
 80072d6:	761a      	strb	r2, [r3, #24]
      break;
 80072d8:	e106      	b.n	80074e8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b04      	cmp	r3, #4
 80072de:	d003      	beq.n	80072e8 <USBH_HandleControl+0xcc>
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	f040 8100 	bne.w	80074e8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	220b      	movs	r2, #11
 80072ec:	761a      	strb	r2, [r3, #24]
      break;
 80072ee:	e0fb      	b.n	80074e8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6899      	ldr	r1, [r3, #8]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	899a      	ldrh	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	791b      	ldrb	r3, [r3, #4]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f93a 	bl	8007582 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2204      	movs	r2, #4
 8007312:	761a      	strb	r2, [r3, #24]
      break;
 8007314:	e0f1      	b.n	80074fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	791b      	ldrb	r3, [r3, #4]
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fc7d 	bl	8007c1c <USBH_LL_GetURBState>
 8007322:	4603      	mov	r3, r0
 8007324:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d102      	bne.n	8007332 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2209      	movs	r2, #9
 8007330:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007332:	7bbb      	ldrb	r3, [r7, #14]
 8007334:	2b05      	cmp	r3, #5
 8007336:	d102      	bne.n	800733e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007338:	2303      	movs	r3, #3
 800733a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800733c:	e0d6      	b.n	80074ec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b04      	cmp	r3, #4
 8007342:	f040 80d3 	bne.w	80074ec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	220b      	movs	r2, #11
 800734a:	761a      	strb	r2, [r3, #24]
      break;
 800734c:	e0ce      	b.n	80074ec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6899      	ldr	r1, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	899a      	ldrh	r2, [r3, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	795b      	ldrb	r3, [r3, #5]
 800735a:	2001      	movs	r0, #1
 800735c:	9000      	str	r0, [sp, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f8ea 	bl	8007538 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800736a:	b29a      	uxth	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2206      	movs	r2, #6
 8007374:	761a      	strb	r2, [r3, #24]
      break;
 8007376:	e0c0      	b.n	80074fa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	795b      	ldrb	r3, [r3, #5]
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fc4c 	bl	8007c1c <USBH_LL_GetURBState>
 8007384:	4603      	mov	r3, r0
 8007386:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007388:	7bbb      	ldrb	r3, [r7, #14]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d103      	bne.n	8007396 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2207      	movs	r2, #7
 8007392:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007394:	e0ac      	b.n	80074f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007396:	7bbb      	ldrb	r3, [r7, #14]
 8007398:	2b05      	cmp	r3, #5
 800739a:	d105      	bne.n	80073a8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	220c      	movs	r2, #12
 80073a0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80073a2:	2303      	movs	r3, #3
 80073a4:	73fb      	strb	r3, [r7, #15]
      break;
 80073a6:	e0a3      	b.n	80074f0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d103      	bne.n	80073b6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2205      	movs	r2, #5
 80073b2:	761a      	strb	r2, [r3, #24]
      break;
 80073b4:	e09c      	b.n	80074f0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	f040 8099 	bne.w	80074f0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	220b      	movs	r2, #11
 80073c2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80073c4:	2302      	movs	r3, #2
 80073c6:	73fb      	strb	r3, [r7, #15]
      break;
 80073c8:	e092      	b.n	80074f0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	791b      	ldrb	r3, [r3, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	2100      	movs	r1, #0
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8d5 	bl	8007582 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073de:	b29a      	uxth	r2, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2208      	movs	r2, #8
 80073e8:	761a      	strb	r2, [r3, #24]

      break;
 80073ea:	e086      	b.n	80074fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	791b      	ldrb	r3, [r3, #4]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fc12 	bl	8007c1c <USBH_LL_GetURBState>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073fc:	7bbb      	ldrb	r3, [r7, #14]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d105      	bne.n	800740e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	220d      	movs	r2, #13
 8007406:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800740c:	e072      	b.n	80074f4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b04      	cmp	r3, #4
 8007412:	d103      	bne.n	800741c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	220b      	movs	r2, #11
 8007418:	761a      	strb	r2, [r3, #24]
      break;
 800741a:	e06b      	b.n	80074f4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800741c:	7bbb      	ldrb	r3, [r7, #14]
 800741e:	2b05      	cmp	r3, #5
 8007420:	d168      	bne.n	80074f4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007422:	2303      	movs	r3, #3
 8007424:	73fb      	strb	r3, [r7, #15]
      break;
 8007426:	e065      	b.n	80074f4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	795b      	ldrb	r3, [r3, #5]
 800742c:	2201      	movs	r2, #1
 800742e:	9200      	str	r2, [sp, #0]
 8007430:	2200      	movs	r2, #0
 8007432:	2100      	movs	r1, #0
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f87f 	bl	8007538 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007440:	b29a      	uxth	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	220a      	movs	r2, #10
 800744a:	761a      	strb	r2, [r3, #24]
      break;
 800744c:	e055      	b.n	80074fa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	795b      	ldrb	r3, [r3, #5]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fbe1 	bl	8007c1c <USBH_LL_GetURBState>
 800745a:	4603      	mov	r3, r0
 800745c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800745e:	7bbb      	ldrb	r3, [r7, #14]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d105      	bne.n	8007470 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007464:	2300      	movs	r3, #0
 8007466:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	220d      	movs	r2, #13
 800746c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800746e:	e043      	b.n	80074f8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007470:	7bbb      	ldrb	r3, [r7, #14]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d103      	bne.n	800747e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2209      	movs	r2, #9
 800747a:	761a      	strb	r2, [r3, #24]
      break;
 800747c:	e03c      	b.n	80074f8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800747e:	7bbb      	ldrb	r3, [r7, #14]
 8007480:	2b04      	cmp	r3, #4
 8007482:	d139      	bne.n	80074f8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	220b      	movs	r2, #11
 8007488:	761a      	strb	r2, [r3, #24]
      break;
 800748a:	e035      	b.n	80074f8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7e5b      	ldrb	r3, [r3, #25]
 8007490:	3301      	adds	r3, #1
 8007492:	b2da      	uxtb	r2, r3
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	765a      	strb	r2, [r3, #25]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	7e5b      	ldrb	r3, [r3, #25]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d806      	bhi.n	80074ae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2201      	movs	r2, #1
 80074a4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80074ac:	e025      	b.n	80074fa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80074b4:	2106      	movs	r1, #6
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	795b      	ldrb	r3, [r3, #5]
 80074c4:	4619      	mov	r1, r3
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f90c 	bl	80076e4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	791b      	ldrb	r3, [r3, #4]
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f906 	bl	80076e4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80074de:	2302      	movs	r3, #2
 80074e0:	73fb      	strb	r3, [r7, #15]
      break;
 80074e2:	e00a      	b.n	80074fa <USBH_HandleControl+0x2de>

    default:
      break;
 80074e4:	bf00      	nop
 80074e6:	e008      	b.n	80074fa <USBH_HandleControl+0x2de>
      break;
 80074e8:	bf00      	nop
 80074ea:	e006      	b.n	80074fa <USBH_HandleControl+0x2de>
      break;
 80074ec:	bf00      	nop
 80074ee:	e004      	b.n	80074fa <USBH_HandleControl+0x2de>
      break;
 80074f0:	bf00      	nop
 80074f2:	e002      	b.n	80074fa <USBH_HandleControl+0x2de>
      break;
 80074f4:	bf00      	nop
 80074f6:	e000      	b.n	80074fa <USBH_HandleControl+0x2de>
      break;
 80074f8:	bf00      	nop
  }

  return status;
 80074fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af04      	add	r7, sp, #16
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007512:	79f9      	ldrb	r1, [r7, #7]
 8007514:	2300      	movs	r3, #0
 8007516:	9303      	str	r3, [sp, #12]
 8007518:	2308      	movs	r3, #8
 800751a:	9302      	str	r3, [sp, #8]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	2300      	movs	r3, #0
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	2300      	movs	r3, #0
 8007526:	2200      	movs	r2, #0
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fb46 	bl	8007bba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b088      	sub	sp, #32
 800753c:	af04      	add	r7, sp, #16
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4611      	mov	r1, r2
 8007544:	461a      	mov	r2, r3
 8007546:	460b      	mov	r3, r1
 8007548:	80fb      	strh	r3, [r7, #6]
 800754a:	4613      	mov	r3, r2
 800754c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800755c:	7979      	ldrb	r1, [r7, #5]
 800755e:	7e3b      	ldrb	r3, [r7, #24]
 8007560:	9303      	str	r3, [sp, #12]
 8007562:	88fb      	ldrh	r3, [r7, #6]
 8007564:	9302      	str	r3, [sp, #8]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	9301      	str	r3, [sp, #4]
 800756a:	2301      	movs	r3, #1
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	2300      	movs	r3, #0
 8007570:	2200      	movs	r2, #0
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 fb21 	bl	8007bba <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	b088      	sub	sp, #32
 8007586:	af04      	add	r7, sp, #16
 8007588:	60f8      	str	r0, [r7, #12]
 800758a:	60b9      	str	r1, [r7, #8]
 800758c:	4611      	mov	r1, r2
 800758e:	461a      	mov	r2, r3
 8007590:	460b      	mov	r3, r1
 8007592:	80fb      	strh	r3, [r7, #6]
 8007594:	4613      	mov	r3, r2
 8007596:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007598:	7979      	ldrb	r1, [r7, #5]
 800759a:	2300      	movs	r3, #0
 800759c:	9303      	str	r3, [sp, #12]
 800759e:	88fb      	ldrh	r3, [r7, #6]
 80075a0:	9302      	str	r3, [sp, #8]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	9301      	str	r3, [sp, #4]
 80075a6:	2301      	movs	r3, #1
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	2300      	movs	r3, #0
 80075ac:	2201      	movs	r2, #1
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f000 fb03 	bl	8007bba <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80075b4:	2300      	movs	r3, #0

}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3710      	adds	r7, #16
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b088      	sub	sp, #32
 80075c2:	af04      	add	r7, sp, #16
 80075c4:	60f8      	str	r0, [r7, #12]
 80075c6:	60b9      	str	r1, [r7, #8]
 80075c8:	4611      	mov	r1, r2
 80075ca:	461a      	mov	r2, r3
 80075cc:	460b      	mov	r3, r1
 80075ce:	80fb      	strh	r3, [r7, #6]
 80075d0:	4613      	mov	r3, r2
 80075d2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80075de:	2300      	movs	r3, #0
 80075e0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075e2:	7979      	ldrb	r1, [r7, #5]
 80075e4:	7e3b      	ldrb	r3, [r7, #24]
 80075e6:	9303      	str	r3, [sp, #12]
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	9302      	str	r3, [sp, #8]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	2301      	movs	r3, #1
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2302      	movs	r3, #2
 80075f6:	2200      	movs	r2, #0
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fade 	bl	8007bba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af04      	add	r7, sp, #16
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	460b      	mov	r3, r1
 8007618:	80fb      	strh	r3, [r7, #6]
 800761a:	4613      	mov	r3, r2
 800761c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800761e:	7979      	ldrb	r1, [r7, #5]
 8007620:	2300      	movs	r3, #0
 8007622:	9303      	str	r3, [sp, #12]
 8007624:	88fb      	ldrh	r3, [r7, #6]
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	9301      	str	r3, [sp, #4]
 800762c:	2301      	movs	r3, #1
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	2302      	movs	r3, #2
 8007632:	2201      	movs	r2, #1
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 fac0 	bl	8007bba <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af04      	add	r7, sp, #16
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	461a      	mov	r2, r3
 8007652:	4603      	mov	r3, r0
 8007654:	70fb      	strb	r3, [r7, #3]
 8007656:	460b      	mov	r3, r1
 8007658:	70bb      	strb	r3, [r7, #2]
 800765a:	4613      	mov	r3, r2
 800765c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800765e:	7878      	ldrb	r0, [r7, #1]
 8007660:	78ba      	ldrb	r2, [r7, #2]
 8007662:	78f9      	ldrb	r1, [r7, #3]
 8007664:	8b3b      	ldrh	r3, [r7, #24]
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	7d3b      	ldrb	r3, [r7, #20]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	7c3b      	ldrb	r3, [r7, #16]
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4603      	mov	r3, r0
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa53 	bl	8007b1e <USBH_LL_OpenPipe>

  return USBH_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa72 	bl	8007b7c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f000 f836 	bl	8007720 <USBH_GetFreePipe>
 80076b4:	4603      	mov	r3, r0
 80076b6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80076b8:	89fb      	ldrh	r3, [r7, #14]
 80076ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00a      	beq.n	80076d8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80076c2:	78fa      	ldrb	r2, [r7, #3]
 80076c4:	89fb      	ldrh	r3, [r7, #14]
 80076c6:	f003 030f 	and.w	r3, r3, #15
 80076ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	33e0      	adds	r3, #224	; 0xe0
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80076d8:	89fb      	ldrh	r3, [r7, #14]
 80076da:	b2db      	uxtb	r3, r3
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	460b      	mov	r3, r1
 80076ee:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	2b0a      	cmp	r3, #10
 80076f4:	d80d      	bhi.n	8007712 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	33e0      	adds	r3, #224	; 0xe0
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	33e0      	adds	r3, #224	; 0xe0
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	440b      	add	r3, r1
 8007710:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
 8007730:	e00f      	b.n	8007752 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007732:	7bfb      	ldrb	r3, [r7, #15]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	33e0      	adds	r3, #224	; 0xe0
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007742:	2b00      	cmp	r3, #0
 8007744:	d102      	bne.n	800774c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007746:	7bfb      	ldrb	r3, [r7, #15]
 8007748:	b29b      	uxth	r3, r3
 800774a:	e007      	b.n	800775c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	3301      	adds	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]
 8007752:	7bfb      	ldrb	r3, [r7, #15]
 8007754:	2b0a      	cmp	r3, #10
 8007756:	d9ec      	bls.n	8007732 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007758:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800776c:	2201      	movs	r2, #1
 800776e:	490e      	ldr	r1, [pc, #56]	; (80077a8 <MX_USB_HOST_Init+0x40>)
 8007770:	480e      	ldr	r0, [pc, #56]	; (80077ac <MX_USB_HOST_Init+0x44>)
 8007772:	f7fe fca1 	bl	80060b8 <USBH_Init>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800777c:	f7f9 fb04 	bl	8000d88 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007780:	490b      	ldr	r1, [pc, #44]	; (80077b0 <MX_USB_HOST_Init+0x48>)
 8007782:	480a      	ldr	r0, [pc, #40]	; (80077ac <MX_USB_HOST_Init+0x44>)
 8007784:	f7fe fd26 	bl	80061d4 <USBH_RegisterClass>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800778e:	f7f9 fafb 	bl	8000d88 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007792:	4806      	ldr	r0, [pc, #24]	; (80077ac <MX_USB_HOST_Init+0x44>)
 8007794:	f7fe fdaa 	bl	80062ec <USBH_Start>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800779e:	f7f9 faf3 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80077a2:	bf00      	nop
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	080077c9 	.word	0x080077c9
 80077ac:	20000204 	.word	0x20000204
 80077b0:	2000000c 	.word	0x2000000c

080077b4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80077b8:	4802      	ldr	r0, [pc, #8]	; (80077c4 <MX_USB_HOST_Process+0x10>)
 80077ba:	f7fe fda7 	bl	800630c <USBH_Process>
}
 80077be:	bf00      	nop
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000204 	.word	0x20000204

080077c8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	3b01      	subs	r3, #1
 80077d8:	2b04      	cmp	r3, #4
 80077da:	d819      	bhi.n	8007810 <USBH_UserProcess+0x48>
 80077dc:	a201      	add	r2, pc, #4	; (adr r2, 80077e4 <USBH_UserProcess+0x1c>)
 80077de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e2:	bf00      	nop
 80077e4:	08007811 	.word	0x08007811
 80077e8:	08007801 	.word	0x08007801
 80077ec:	08007811 	.word	0x08007811
 80077f0:	08007809 	.word	0x08007809
 80077f4:	080077f9 	.word	0x080077f9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80077f8:	4b09      	ldr	r3, [pc, #36]	; (8007820 <USBH_UserProcess+0x58>)
 80077fa:	2203      	movs	r2, #3
 80077fc:	701a      	strb	r2, [r3, #0]
  break;
 80077fe:	e008      	b.n	8007812 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <USBH_UserProcess+0x58>)
 8007802:	2202      	movs	r2, #2
 8007804:	701a      	strb	r2, [r3, #0]
  break;
 8007806:	e004      	b.n	8007812 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007808:	4b05      	ldr	r3, [pc, #20]	; (8007820 <USBH_UserProcess+0x58>)
 800780a:	2201      	movs	r2, #1
 800780c:	701a      	strb	r2, [r3, #0]
  break;
 800780e:	e000      	b.n	8007812 <USBH_UserProcess+0x4a>

  default:
  break;
 8007810:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr
 800781e:	bf00      	nop
 8007820:	200000b0 	.word	0x200000b0

08007824 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08a      	sub	sp, #40	; 0x28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800782c:	f107 0314 	add.w	r3, r7, #20
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	605a      	str	r2, [r3, #4]
 8007836:	609a      	str	r2, [r3, #8]
 8007838:	60da      	str	r2, [r3, #12]
 800783a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007844:	d147      	bne.n	80078d6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007846:	2300      	movs	r3, #0
 8007848:	613b      	str	r3, [r7, #16]
 800784a:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <HAL_HCD_MspInit+0xbc>)
 800784c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784e:	4a24      	ldr	r2, [pc, #144]	; (80078e0 <HAL_HCD_MspInit+0xbc>)
 8007850:	f043 0301 	orr.w	r3, r3, #1
 8007854:	6313      	str	r3, [r2, #48]	; 0x30
 8007856:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <HAL_HCD_MspInit+0xbc>)
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	613b      	str	r3, [r7, #16]
 8007860:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007868:	2300      	movs	r3, #0
 800786a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786c:	2300      	movs	r3, #0
 800786e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007870:	f107 0314 	add.w	r3, r7, #20
 8007874:	4619      	mov	r1, r3
 8007876:	481b      	ldr	r0, [pc, #108]	; (80078e4 <HAL_HCD_MspInit+0xc0>)
 8007878:	f7f9 fd80 	bl	800137c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800787c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007882:	2302      	movs	r3, #2
 8007884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007886:	2300      	movs	r3, #0
 8007888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800788a:	2300      	movs	r3, #0
 800788c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800788e:	230a      	movs	r3, #10
 8007890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007892:	f107 0314 	add.w	r3, r7, #20
 8007896:	4619      	mov	r1, r3
 8007898:	4812      	ldr	r0, [pc, #72]	; (80078e4 <HAL_HCD_MspInit+0xc0>)
 800789a:	f7f9 fd6f 	bl	800137c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800789e:	4b10      	ldr	r3, [pc, #64]	; (80078e0 <HAL_HCD_MspInit+0xbc>)
 80078a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078a2:	4a0f      	ldr	r2, [pc, #60]	; (80078e0 <HAL_HCD_MspInit+0xbc>)
 80078a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a8:	6353      	str	r3, [r2, #52]	; 0x34
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
 80078ae:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <HAL_HCD_MspInit+0xbc>)
 80078b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b2:	4a0b      	ldr	r2, [pc, #44]	; (80078e0 <HAL_HCD_MspInit+0xbc>)
 80078b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078b8:	6453      	str	r3, [r2, #68]	; 0x44
 80078ba:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <HAL_HCD_MspInit+0xbc>)
 80078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80078c6:	2200      	movs	r2, #0
 80078c8:	2100      	movs	r1, #0
 80078ca:	2043      	movs	r0, #67	; 0x43
 80078cc:	f7f9 fd1f 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80078d0:	2043      	movs	r0, #67	; 0x43
 80078d2:	f7f9 fd38 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078d6:	bf00      	nop
 80078d8:	3728      	adds	r7, #40	; 0x28
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	40023800 	.word	0x40023800
 80078e4:	40020000 	.word	0x40020000

080078e8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff f8db 	bl	8006ab2 <USBH_LL_IncTimer>
}
 80078fc:	bf00      	nop
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007912:	4618      	mov	r0, r3
 8007914:	f7ff f913 	bl	8006b3e <USBH_LL_Connect>
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff f91c 	bl	8006b6c <USBH_LL_Disconnect>
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
 8007948:	4613      	mov	r3, r2
 800794a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff f8cd 	bl	8006b06 <USBH_LL_PortEnabled>
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007982:	4618      	mov	r0, r3
 8007984:	f7ff f8cd 	bl	8006b22 <USBH_LL_PortDisabled>
}
 8007988:	bf00      	nop
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d12a      	bne.n	80079f8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80079a2:	4a18      	ldr	r2, [pc, #96]	; (8007a04 <USBH_LL_Init+0x74>)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a15      	ldr	r2, [pc, #84]	; (8007a04 <USBH_LL_Init+0x74>)
 80079ae:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079b2:	4b14      	ldr	r3, [pc, #80]	; (8007a04 <USBH_LL_Init+0x74>)
 80079b4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079b8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80079ba:	4b12      	ldr	r3, [pc, #72]	; (8007a04 <USBH_LL_Init+0x74>)
 80079bc:	2208      	movs	r2, #8
 80079be:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80079c0:	4b10      	ldr	r3, [pc, #64]	; (8007a04 <USBH_LL_Init+0x74>)
 80079c2:	2201      	movs	r2, #1
 80079c4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079c6:	4b0f      	ldr	r3, [pc, #60]	; (8007a04 <USBH_LL_Init+0x74>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80079cc:	4b0d      	ldr	r3, [pc, #52]	; (8007a04 <USBH_LL_Init+0x74>)
 80079ce:	2202      	movs	r2, #2
 80079d0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079d2:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <USBH_LL_Init+0x74>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80079d8:	480a      	ldr	r0, [pc, #40]	; (8007a04 <USBH_LL_Init+0x74>)
 80079da:	f7f9 fe9c 	bl	8001716 <HAL_HCD_Init>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d001      	beq.n	80079e8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80079e4:	f7f9 f9d0 	bl	8000d88 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80079e8:	4806      	ldr	r0, [pc, #24]	; (8007a04 <USBH_LL_Init+0x74>)
 80079ea:	f7fa fa80 	bl	8001eee <HAL_HCD_GetCurrentFrame>
 80079ee:	4603      	mov	r3, r0
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff f84e 	bl	8006a94 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200005dc 	.word	0x200005dc

08007a08 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a14:	2300      	movs	r3, #0
 8007a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fa f9ef 	bl	8001e02 <HAL_HCD_Start>
 8007a24:	4603      	mov	r3, r0
 8007a26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f95c 	bl	8007ce8 <USBH_Get_USB_Status>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fa f9f7 	bl	8001e48 <HAL_HCD_Stop>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f000 f941 	bl	8007ce8 <USBH_Get_USB_Status>
 8007a66:	4603      	mov	r3, r0
 8007a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3710      	adds	r7, #16
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fa fa3f 	bl	8001f0a <HAL_HCD_GetCurrentSpeed>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d00c      	beq.n	8007aac <USBH_LL_GetSpeed+0x38>
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d80d      	bhi.n	8007ab2 <USBH_LL_GetSpeed+0x3e>
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <USBH_LL_GetSpeed+0x2c>
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d003      	beq.n	8007aa6 <USBH_LL_GetSpeed+0x32>
 8007a9e:	e008      	b.n	8007ab2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73fb      	strb	r3, [r7, #15]
    break;
 8007aa4:	e008      	b.n	8007ab8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aaa:	e005      	b.n	8007ab8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8007aac:	2302      	movs	r3, #2
 8007aae:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab0:	e002      	b.n	8007ab8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ab6:	bf00      	nop
  }
  return  speed;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fa f9d2 	bl	8001e82 <HAL_HCD_ResetPort>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 f8ff 	bl	8007ce8 <USBH_Get_USB_Status>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	460b      	mov	r3, r1
 8007b02:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa f9d9 	bl	8001ec6 <HAL_HCD_HC_GetXferCount>
 8007b14:	4603      	mov	r3, r0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007b1e:	b590      	push	{r4, r7, lr}
 8007b20:	b089      	sub	sp, #36	; 0x24
 8007b22:	af04      	add	r7, sp, #16
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	4608      	mov	r0, r1
 8007b28:	4611      	mov	r1, r2
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	70fb      	strb	r3, [r7, #3]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70bb      	strb	r3, [r7, #2]
 8007b34:	4613      	mov	r3, r2
 8007b36:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007b46:	787c      	ldrb	r4, [r7, #1]
 8007b48:	78ba      	ldrb	r2, [r7, #2]
 8007b4a:	78f9      	ldrb	r1, [r7, #3]
 8007b4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007b4e:	9302      	str	r3, [sp, #8]
 8007b50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b54:	9301      	str	r3, [sp, #4]
 8007b56:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b5a:	9300      	str	r3, [sp, #0]
 8007b5c:	4623      	mov	r3, r4
 8007b5e:	f7f9 fe3c 	bl	80017da <HAL_HCD_HC_Init>
 8007b62:	4603      	mov	r3, r0
 8007b64:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007b66:	7bfb      	ldrb	r3, [r7, #15]
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 f8bd 	bl	8007ce8 <USBH_Get_USB_Status>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd90      	pop	{r4, r7, pc}

08007b7c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007b96:	78fa      	ldrb	r2, [r7, #3]
 8007b98:	4611      	mov	r1, r2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7f9 feac 	bl	80018f8 <HAL_HCD_HC_Halt>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f000 f89e 	bl	8007ce8 <USBH_Get_USB_Status>
 8007bac:	4603      	mov	r3, r0
 8007bae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007bba:	b590      	push	{r4, r7, lr}
 8007bbc:	b089      	sub	sp, #36	; 0x24
 8007bbe:	af04      	add	r7, sp, #16
 8007bc0:	6078      	str	r0, [r7, #4]
 8007bc2:	4608      	mov	r0, r1
 8007bc4:	4611      	mov	r1, r2
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	4603      	mov	r3, r0
 8007bca:	70fb      	strb	r3, [r7, #3]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70bb      	strb	r3, [r7, #2]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007be2:	787c      	ldrb	r4, [r7, #1]
 8007be4:	78ba      	ldrb	r2, [r7, #2]
 8007be6:	78f9      	ldrb	r1, [r7, #3]
 8007be8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007bec:	9303      	str	r3, [sp, #12]
 8007bee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bf0:	9302      	str	r3, [sp, #8]
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	9301      	str	r3, [sp, #4]
 8007bf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	4623      	mov	r3, r4
 8007bfe:	f7f9 fe9f 	bl	8001940 <HAL_HCD_HC_SubmitRequest>
 8007c02:	4603      	mov	r3, r0
 8007c04:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007c06:	7bfb      	ldrb	r3, [r7, #15]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 f86d 	bl	8007ce8 <USBH_Get_USB_Status>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd90      	pop	{r4, r7, pc}

08007c1c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	460b      	mov	r3, r1
 8007c26:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	4611      	mov	r1, r2
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fa f933 	bl	8001e9e <HAL_HCD_HC_GetURBState>
 8007c38:	4603      	mov	r3, r0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b082      	sub	sp, #8
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d103      	bne.n	8007c60 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007c58:	78fb      	ldrb	r3, [r7, #3]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 f870 	bl	8007d40 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007c60:	20c8      	movs	r0, #200	; 0xc8
 8007c62:	f7f9 fa55 	bl	8001110 <HAL_Delay>
  return USBH_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007c86:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	212c      	movs	r1, #44	; 0x2c
 8007c8e:	fb01 f303 	mul.w	r3, r1, r3
 8007c92:	4413      	add	r3, r2
 8007c94:	333b      	adds	r3, #59	; 0x3b
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d009      	beq.n	8007cb0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007c9c:	78fb      	ldrb	r3, [r7, #3]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	212c      	movs	r1, #44	; 0x2c
 8007ca2:	fb01 f303 	mul.w	r3, r1, r3
 8007ca6:	4413      	add	r3, r2
 8007ca8:	3354      	adds	r3, #84	; 0x54
 8007caa:	78ba      	ldrb	r2, [r7, #2]
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	e008      	b.n	8007cc2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8007cb0:	78fb      	ldrb	r3, [r7, #3]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	212c      	movs	r1, #44	; 0x2c
 8007cb6:	fb01 f303 	mul.w	r3, r1, r3
 8007cba:	4413      	add	r3, r2
 8007cbc:	3355      	adds	r3, #85	; 0x55
 8007cbe:	78ba      	ldrb	r2, [r7, #2]
 8007cc0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7f9 fa19 	bl	8001110 <HAL_Delay>
}
 8007cde:	bf00      	nop
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	2b03      	cmp	r3, #3
 8007cfa:	d817      	bhi.n	8007d2c <USBH_Get_USB_Status+0x44>
 8007cfc:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <USBH_Get_USB_Status+0x1c>)
 8007cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d02:	bf00      	nop
 8007d04:	08007d15 	.word	0x08007d15
 8007d08:	08007d1b 	.word	0x08007d1b
 8007d0c:	08007d21 	.word	0x08007d21
 8007d10:	08007d27 	.word	0x08007d27
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007d14:	2300      	movs	r3, #0
 8007d16:	73fb      	strb	r3, [r7, #15]
    break;
 8007d18:	e00b      	b.n	8007d32 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1e:	e008      	b.n	8007d32 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007d20:	2301      	movs	r3, #1
 8007d22:	73fb      	strb	r3, [r7, #15]
    break;
 8007d24:	e005      	b.n	8007d32 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007d26:	2302      	movs	r3, #2
 8007d28:	73fb      	strb	r3, [r7, #15]
    break;
 8007d2a:	e002      	b.n	8007d32 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d30:	bf00      	nop
  }
  return usb_status;
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	4603      	mov	r3, r0
 8007d48:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d102      	bne.n	8007d5a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8007d54:	2301      	movs	r3, #1
 8007d56:	73fb      	strb	r3, [r7, #15]
 8007d58:	e001      	b.n	8007d5e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
 8007d60:	461a      	mov	r2, r3
 8007d62:	2101      	movs	r1, #1
 8007d64:	4803      	ldr	r0, [pc, #12]	; (8007d74 <MX_DriverVbusFS+0x34>)
 8007d66:	f7f9 fcbd 	bl	80016e4 <HAL_GPIO_WritePin>
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	40020800 	.word	0x40020800

08007d78 <__errno>:
 8007d78:	4b01      	ldr	r3, [pc, #4]	; (8007d80 <__errno+0x8>)
 8007d7a:	6818      	ldr	r0, [r3, #0]
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	2000002c 	.word	0x2000002c

08007d84 <__libc_init_array>:
 8007d84:	b570      	push	{r4, r5, r6, lr}
 8007d86:	4d0d      	ldr	r5, [pc, #52]	; (8007dbc <__libc_init_array+0x38>)
 8007d88:	4c0d      	ldr	r4, [pc, #52]	; (8007dc0 <__libc_init_array+0x3c>)
 8007d8a:	1b64      	subs	r4, r4, r5
 8007d8c:	10a4      	asrs	r4, r4, #2
 8007d8e:	2600      	movs	r6, #0
 8007d90:	42a6      	cmp	r6, r4
 8007d92:	d109      	bne.n	8007da8 <__libc_init_array+0x24>
 8007d94:	4d0b      	ldr	r5, [pc, #44]	; (8007dc4 <__libc_init_array+0x40>)
 8007d96:	4c0c      	ldr	r4, [pc, #48]	; (8007dc8 <__libc_init_array+0x44>)
 8007d98:	f000 f8f8 	bl	8007f8c <_init>
 8007d9c:	1b64      	subs	r4, r4, r5
 8007d9e:	10a4      	asrs	r4, r4, #2
 8007da0:	2600      	movs	r6, #0
 8007da2:	42a6      	cmp	r6, r4
 8007da4:	d105      	bne.n	8007db2 <__libc_init_array+0x2e>
 8007da6:	bd70      	pop	{r4, r5, r6, pc}
 8007da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dac:	4798      	blx	r3
 8007dae:	3601      	adds	r6, #1
 8007db0:	e7ee      	b.n	8007d90 <__libc_init_array+0xc>
 8007db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007db6:	4798      	blx	r3
 8007db8:	3601      	adds	r6, #1
 8007dba:	e7f2      	b.n	8007da2 <__libc_init_array+0x1e>
 8007dbc:	08007fc8 	.word	0x08007fc8
 8007dc0:	08007fc8 	.word	0x08007fc8
 8007dc4:	08007fc8 	.word	0x08007fc8
 8007dc8:	08007fcc 	.word	0x08007fcc

08007dcc <malloc>:
 8007dcc:	4b02      	ldr	r3, [pc, #8]	; (8007dd8 <malloc+0xc>)
 8007dce:	4601      	mov	r1, r0
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	f000 b863 	b.w	8007e9c <_malloc_r>
 8007dd6:	bf00      	nop
 8007dd8:	2000002c 	.word	0x2000002c

08007ddc <free>:
 8007ddc:	4b02      	ldr	r3, [pc, #8]	; (8007de8 <free+0xc>)
 8007dde:	4601      	mov	r1, r0
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	f000 b80b 	b.w	8007dfc <_free_r>
 8007de6:	bf00      	nop
 8007de8:	2000002c 	.word	0x2000002c

08007dec <memset>:
 8007dec:	4402      	add	r2, r0
 8007dee:	4603      	mov	r3, r0
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d100      	bne.n	8007df6 <memset+0xa>
 8007df4:	4770      	bx	lr
 8007df6:	f803 1b01 	strb.w	r1, [r3], #1
 8007dfa:	e7f9      	b.n	8007df0 <memset+0x4>

08007dfc <_free_r>:
 8007dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	d048      	beq.n	8007e94 <_free_r+0x98>
 8007e02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e06:	9001      	str	r0, [sp, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f1a1 0404 	sub.w	r4, r1, #4
 8007e0e:	bfb8      	it	lt
 8007e10:	18e4      	addlt	r4, r4, r3
 8007e12:	f000 f8ad 	bl	8007f70 <__malloc_lock>
 8007e16:	4a20      	ldr	r2, [pc, #128]	; (8007e98 <_free_r+0x9c>)
 8007e18:	9801      	ldr	r0, [sp, #4]
 8007e1a:	6813      	ldr	r3, [r2, #0]
 8007e1c:	4615      	mov	r5, r2
 8007e1e:	b933      	cbnz	r3, 8007e2e <_free_r+0x32>
 8007e20:	6063      	str	r3, [r4, #4]
 8007e22:	6014      	str	r4, [r2, #0]
 8007e24:	b003      	add	sp, #12
 8007e26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e2a:	f000 b8a7 	b.w	8007f7c <__malloc_unlock>
 8007e2e:	42a3      	cmp	r3, r4
 8007e30:	d90b      	bls.n	8007e4a <_free_r+0x4e>
 8007e32:	6821      	ldr	r1, [r4, #0]
 8007e34:	1862      	adds	r2, r4, r1
 8007e36:	4293      	cmp	r3, r2
 8007e38:	bf04      	itt	eq
 8007e3a:	681a      	ldreq	r2, [r3, #0]
 8007e3c:	685b      	ldreq	r3, [r3, #4]
 8007e3e:	6063      	str	r3, [r4, #4]
 8007e40:	bf04      	itt	eq
 8007e42:	1852      	addeq	r2, r2, r1
 8007e44:	6022      	streq	r2, [r4, #0]
 8007e46:	602c      	str	r4, [r5, #0]
 8007e48:	e7ec      	b.n	8007e24 <_free_r+0x28>
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	b10b      	cbz	r3, 8007e54 <_free_r+0x58>
 8007e50:	42a3      	cmp	r3, r4
 8007e52:	d9fa      	bls.n	8007e4a <_free_r+0x4e>
 8007e54:	6811      	ldr	r1, [r2, #0]
 8007e56:	1855      	adds	r5, r2, r1
 8007e58:	42a5      	cmp	r5, r4
 8007e5a:	d10b      	bne.n	8007e74 <_free_r+0x78>
 8007e5c:	6824      	ldr	r4, [r4, #0]
 8007e5e:	4421      	add	r1, r4
 8007e60:	1854      	adds	r4, r2, r1
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	6011      	str	r1, [r2, #0]
 8007e66:	d1dd      	bne.n	8007e24 <_free_r+0x28>
 8007e68:	681c      	ldr	r4, [r3, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	6053      	str	r3, [r2, #4]
 8007e6e:	4421      	add	r1, r4
 8007e70:	6011      	str	r1, [r2, #0]
 8007e72:	e7d7      	b.n	8007e24 <_free_r+0x28>
 8007e74:	d902      	bls.n	8007e7c <_free_r+0x80>
 8007e76:	230c      	movs	r3, #12
 8007e78:	6003      	str	r3, [r0, #0]
 8007e7a:	e7d3      	b.n	8007e24 <_free_r+0x28>
 8007e7c:	6825      	ldr	r5, [r4, #0]
 8007e7e:	1961      	adds	r1, r4, r5
 8007e80:	428b      	cmp	r3, r1
 8007e82:	bf04      	itt	eq
 8007e84:	6819      	ldreq	r1, [r3, #0]
 8007e86:	685b      	ldreq	r3, [r3, #4]
 8007e88:	6063      	str	r3, [r4, #4]
 8007e8a:	bf04      	itt	eq
 8007e8c:	1949      	addeq	r1, r1, r5
 8007e8e:	6021      	streq	r1, [r4, #0]
 8007e90:	6054      	str	r4, [r2, #4]
 8007e92:	e7c7      	b.n	8007e24 <_free_r+0x28>
 8007e94:	b003      	add	sp, #12
 8007e96:	bd30      	pop	{r4, r5, pc}
 8007e98:	200000b4 	.word	0x200000b4

08007e9c <_malloc_r>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	1ccd      	adds	r5, r1, #3
 8007ea0:	f025 0503 	bic.w	r5, r5, #3
 8007ea4:	3508      	adds	r5, #8
 8007ea6:	2d0c      	cmp	r5, #12
 8007ea8:	bf38      	it	cc
 8007eaa:	250c      	movcc	r5, #12
 8007eac:	2d00      	cmp	r5, #0
 8007eae:	4606      	mov	r6, r0
 8007eb0:	db01      	blt.n	8007eb6 <_malloc_r+0x1a>
 8007eb2:	42a9      	cmp	r1, r5
 8007eb4:	d903      	bls.n	8007ebe <_malloc_r+0x22>
 8007eb6:	230c      	movs	r3, #12
 8007eb8:	6033      	str	r3, [r6, #0]
 8007eba:	2000      	movs	r0, #0
 8007ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ebe:	f000 f857 	bl	8007f70 <__malloc_lock>
 8007ec2:	4921      	ldr	r1, [pc, #132]	; (8007f48 <_malloc_r+0xac>)
 8007ec4:	680a      	ldr	r2, [r1, #0]
 8007ec6:	4614      	mov	r4, r2
 8007ec8:	b99c      	cbnz	r4, 8007ef2 <_malloc_r+0x56>
 8007eca:	4f20      	ldr	r7, [pc, #128]	; (8007f4c <_malloc_r+0xb0>)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	b923      	cbnz	r3, 8007eda <_malloc_r+0x3e>
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 f83c 	bl	8007f50 <_sbrk_r>
 8007ed8:	6038      	str	r0, [r7, #0]
 8007eda:	4629      	mov	r1, r5
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 f837 	bl	8007f50 <_sbrk_r>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d123      	bne.n	8007f2e <_malloc_r+0x92>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	6033      	str	r3, [r6, #0]
 8007eea:	4630      	mov	r0, r6
 8007eec:	f000 f846 	bl	8007f7c <__malloc_unlock>
 8007ef0:	e7e3      	b.n	8007eba <_malloc_r+0x1e>
 8007ef2:	6823      	ldr	r3, [r4, #0]
 8007ef4:	1b5b      	subs	r3, r3, r5
 8007ef6:	d417      	bmi.n	8007f28 <_malloc_r+0x8c>
 8007ef8:	2b0b      	cmp	r3, #11
 8007efa:	d903      	bls.n	8007f04 <_malloc_r+0x68>
 8007efc:	6023      	str	r3, [r4, #0]
 8007efe:	441c      	add	r4, r3
 8007f00:	6025      	str	r5, [r4, #0]
 8007f02:	e004      	b.n	8007f0e <_malloc_r+0x72>
 8007f04:	6863      	ldr	r3, [r4, #4]
 8007f06:	42a2      	cmp	r2, r4
 8007f08:	bf0c      	ite	eq
 8007f0a:	600b      	streq	r3, [r1, #0]
 8007f0c:	6053      	strne	r3, [r2, #4]
 8007f0e:	4630      	mov	r0, r6
 8007f10:	f000 f834 	bl	8007f7c <__malloc_unlock>
 8007f14:	f104 000b 	add.w	r0, r4, #11
 8007f18:	1d23      	adds	r3, r4, #4
 8007f1a:	f020 0007 	bic.w	r0, r0, #7
 8007f1e:	1ac2      	subs	r2, r0, r3
 8007f20:	d0cc      	beq.n	8007ebc <_malloc_r+0x20>
 8007f22:	1a1b      	subs	r3, r3, r0
 8007f24:	50a3      	str	r3, [r4, r2]
 8007f26:	e7c9      	b.n	8007ebc <_malloc_r+0x20>
 8007f28:	4622      	mov	r2, r4
 8007f2a:	6864      	ldr	r4, [r4, #4]
 8007f2c:	e7cc      	b.n	8007ec8 <_malloc_r+0x2c>
 8007f2e:	1cc4      	adds	r4, r0, #3
 8007f30:	f024 0403 	bic.w	r4, r4, #3
 8007f34:	42a0      	cmp	r0, r4
 8007f36:	d0e3      	beq.n	8007f00 <_malloc_r+0x64>
 8007f38:	1a21      	subs	r1, r4, r0
 8007f3a:	4630      	mov	r0, r6
 8007f3c:	f000 f808 	bl	8007f50 <_sbrk_r>
 8007f40:	3001      	adds	r0, #1
 8007f42:	d1dd      	bne.n	8007f00 <_malloc_r+0x64>
 8007f44:	e7cf      	b.n	8007ee6 <_malloc_r+0x4a>
 8007f46:	bf00      	nop
 8007f48:	200000b4 	.word	0x200000b4
 8007f4c:	200000b8 	.word	0x200000b8

08007f50 <_sbrk_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	4d06      	ldr	r5, [pc, #24]	; (8007f6c <_sbrk_r+0x1c>)
 8007f54:	2300      	movs	r3, #0
 8007f56:	4604      	mov	r4, r0
 8007f58:	4608      	mov	r0, r1
 8007f5a:	602b      	str	r3, [r5, #0]
 8007f5c:	f7f8 fff4 	bl	8000f48 <_sbrk>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d102      	bne.n	8007f6a <_sbrk_r+0x1a>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	b103      	cbz	r3, 8007f6a <_sbrk_r+0x1a>
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	200008e0 	.word	0x200008e0

08007f70 <__malloc_lock>:
 8007f70:	4801      	ldr	r0, [pc, #4]	; (8007f78 <__malloc_lock+0x8>)
 8007f72:	f000 b809 	b.w	8007f88 <__retarget_lock_acquire_recursive>
 8007f76:	bf00      	nop
 8007f78:	200008e8 	.word	0x200008e8

08007f7c <__malloc_unlock>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__malloc_unlock+0x8>)
 8007f7e:	f000 b804 	b.w	8007f8a <__retarget_lock_release_recursive>
 8007f82:	bf00      	nop
 8007f84:	200008e8 	.word	0x200008e8

08007f88 <__retarget_lock_acquire_recursive>:
 8007f88:	4770      	bx	lr

08007f8a <__retarget_lock_release_recursive>:
 8007f8a:	4770      	bx	lr

08007f8c <_init>:
 8007f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8e:	bf00      	nop
 8007f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f92:	bc08      	pop	{r3}
 8007f94:	469e      	mov	lr, r3
 8007f96:	4770      	bx	lr

08007f98 <_fini>:
 8007f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f9a:	bf00      	nop
 8007f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f9e:	bc08      	pop	{r3}
 8007fa0:	469e      	mov	lr, r3
 8007fa2:	4770      	bx	lr
